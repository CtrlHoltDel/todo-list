(()=>{"use strict";var e={982:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(15),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Cabin&display=swap);"]),i.push([e.id,'* {\n  margin: 0;\n  padding: 0;\n  font-family: "Cabin", sans-serif;\n}\n\n.container {\n  width: 100vw;\n}\n\n#taskInputForm {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n}\n\nheader {\n  width: 100%;\n  background-color: #003049;\n  height: 10vh;\n  color: white;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n\nfooter {\n  width: 100%;\n  height: 4vh;\n  background-color: #003049;\n  color: white;\n}\n\n#undefined {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n}\n\n@media (min-width: 900px) {\n  .content {\n    height: 86vh;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n  }\n  .content #projects {\n    width: 15%;\n    height: 100%;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: justify;\n        -ms-flex-pack: justify;\n            justify-content: space-between;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    background-color: #669bbc;\n  }\n  .content #projects #projectsContainer {\n    width: 100%;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    overflow: hidden;\n  }\n  .content #projects #projectsContainer h1 {\n    width: 100%;\n    color: #003049;\n    font-size: 2.5rem;\n    text-align: center;\n    margin-top: 5px;\n  }\n  .content #projects #projectsContainer form {\n    width: 95%;\n    margin: 10px 0px;\n  }\n  .content #projects #projectsContainer form input {\n    width: 100%;\n    border: none;\n    height: 2rem;\n    font-size: 1.1rem;\n    text-align: center;\n  }\n  .content #projects #projectsContainer form input:focus {\n    background-color: #003049;\n    color: white;\n  }\n  .content #projects #projectsContainer form button {\n    margin-top: 5px;\n    width: 100%;\n    background-color: #e7d7ad;\n    height: 1.5em;\n    border: none;\n  }\n  .content #projects #projectsContainer form button:hover {\n    background-color: #72705e;\n    cursor: pointer;\n  }\n  .content #projects #projectsContainer #projectsList {\n    width: 100%;\n  }\n  .content #projects #projectsContainer #projectsList .projectListLI {\n    height: 2rem;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: justify;\n        -ms-flex-pack: justify;\n            justify-content: space-between;\n  }\n  .content #projects #projectsContainer #projectsList .projectListLI .deleteProjectDiv {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    width: 15%;\n    background-color: #c1121f;\n  }\n  .content #projects #projectsContainer #projectsList .projectListLI .deleteProjectDiv:hover {\n    cursor: pointer;\n    background-color: #780000;\n  }\n  .content #projects #projectsContainer #projectsList .projectListLI .currentlyselected {\n    background-color: #003049;\n    color: white;\n  }\n  .content #projects #projectsContainer #projectsList .projectListLI .addProjectDiv {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: end;\n        -ms-flex-pack: end;\n            justify-content: flex-end;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    width: 100%;\n    font-weight: bold;\n  }\n  .content #projects #projectsContainer #projectsList .projectListLI .addProjectDiv:hover {\n    background-color: #003049;\n    cursor: pointer;\n    color: white;\n    font-weight: bold;\n  }\n  .content #projects .taskInputDiv {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    background-color: #003049;\n    border-radius: 0px 25px 0px 0px;\n    width: 100%;\n    height: 35%;\n    color: white;\n  }\n  .content #projects .taskInputDiv #taskInputForm {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-pack: justify;\n        -ms-flex-pack: justify;\n            justify-content: space-between;\n    width: 80%;\n    height: 85%;\n  }\n  .content #projects .taskInputDiv #taskInputForm .taskHeader {\n    text-align: center;\n    font-size: 2rem;\n  }\n  .content #projects .taskInputDiv #taskInputForm .titleHeader {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: justify;\n        -ms-flex-pack: justify;\n            justify-content: space-between;\n  }\n  .content #projects .taskInputDiv #taskInputForm .titleHeader .errorForm {\n    display: none;\n    color: #c1121f;\n  }\n  .content #projects .taskInputDiv #taskInputForm button {\n    background-color: #e7d7ad;\n    color: #2A1E30;\n    margin-top: 5px;\n    border: none;\n    padding: 5px 0px;\n    border-radius: 5px;\n  }\n  .content #projects .taskInputDiv #taskInputForm button:hover {\n    cursor: pointer;\n    background-color: #72705e;\n  }\n  .content #list {\n    width: 85%;\n    height: 100%;\n  }\n  .content #list #allTasksContainer {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    height: 100%;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n  }\n  .content #list #allTasksContainer .taskContainer {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    width: 98%;\n    margin-top: 10px;\n    height: 2rem;\n    background-color: #669bbc;\n  }\n  .content #list #allTasksContainer .taskContainer .titleTaskContainer {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    width: 10%;\n    font-weight: bold;\n  }\n  .content #list #allTasksContainer .taskContainer .dateTaskContainer {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    width: 10%;\n  }\n  .content #list #allTasksContainer .taskContainer .descriptionTaskContainer {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    width: 78%;\n  }\n  .content #list #allTasksContainer .taskContainer .deleteTaskContainer {\n    background-color: #c1121f;\n    width: 3%;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n  }\n  .content #list #allTasksContainer .taskContainer .deleteTaskContainer img {\n    height: 25px;\n    width: 25px;\n  }\n  .content #list #allTasksContainer .taskContainer .deleteTaskContainer:hover {\n    cursor: pointer;\n    background-color: #780000;\n  }\n  .content #list #allTasksContainer .taskContainer:hover {\n    cursor: pointer;\n  }\n  .content #list #allTasksContainer .completed {\n    color: #413e3e;\n    background-color: #bbb2b2;\n    text-decoration: line-through;\n  }\n  .content #list #allTasksContainer .completed .deleteTaskContainer {\n    background-color: #57383a;\n  }\n}\n\n@media (max-width: 900px) {\n  .content {\n    min-height: 86vh;\n  }\n}\n/*# sourceMappingURL=style.css.map */',"",{version:3,sources:["webpack://./src/style/style.scss","webpack://./src/style/style.css"],names:[],mappings:"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",sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&a[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,a=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){s=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw a}}return o}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if(!i)return o;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),u="/*# ".concat(c," */"),l=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[o].concat(l).concat([u]).join("\n")}return[o].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],u=r.base?c[0]+r.base:c[0],l=o[u]||0,d="".concat(u," ").concat(l);o[u]=l+1;var A=n(d),f={css:c[1],media:c[2],sourceMap:c[3]};-1!==A?(t[A].references++,t[A].updater(f)):t.push({identifier:d,updater:a(f,r),references:1}),i.push(d)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=n(o[i]);t[s].references--}for(var c=r(e,a),u=0;u<o.length;u++){var l=n(o[u]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}o=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;a?e.setAttribute("media",a):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},543:(e,t,n)=>{e.exports=n.p+"9e7d3c37667286768ef7.png"}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{var e=n(379),t=n.n(e),r=n(795),a=n.n(r),o=n(569),i=n.n(o),s=n(565),c=n.n(s),u=n(216),l=n.n(u),d=n(589),A=n.n(d),f=n(982),m={};function h(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function g(e){h(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function p(e){h(1,arguments);var t=g(e);return!isNaN(t)}m.styleTagTransform=A(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=l(),t()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;var C={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function b(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}var B,w={date:b({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:b({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:b({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function v(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var s=e.defaultWidth,c=a.width?String(a.width):e.defaultWidth;r=e.values[c]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function x(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,s=o[0],c=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],u=Array.isArray(c)?k(c,(function(e){return e.test(s)})):E(c,(function(e){return e.test(s)}));i=e.valueCallback?e.valueCallback(u):u,i=n.valueCallback?n.valueCallback(i):i;var l=t.slice(s.length);return{value:i,rest:l}}}function E(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function k(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const I={code:"en-US",formatDistance:function(e,t,n){var r;return n=n||{},r="string"==typeof C[e]?C[e]:1===t?C[e].one:C[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:w,formatRelative:function(e,t,n,r){return y[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:v({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:v({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:v({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:v({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:v({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(B={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(B.matchPattern);if(!n)return null;var r=n[0],a=e.match(B.parsePattern);if(!a)return null;var o=B.valueCallback?B.valueCallback(a[0]):a[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(r.length);return{value:o,rest:i}}),era:x({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:x({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:x({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:x({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:x({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function T(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function D(e,t){h(2,arguments);var n=g(e).getTime(),r=T(t);return new Date(n+r)}function M(e,t){h(2,arguments);var n=T(t);return D(e,-n)}function j(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const L=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return j("yy"===t?r%100:r,t.length)},Y=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):j(n+1,2)},U=function(e,t){return j(e.getUTCDate(),t.length)},S=function(e,t){return j(e.getUTCHours()%12||12,t.length)},P=function(e,t){return j(e.getUTCHours(),t.length)},N=function(e,t){return j(e.getUTCMinutes(),t.length)},W=function(e,t){return j(e.getUTCSeconds(),t.length)},F=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return j(Math.floor(r*Math.pow(10,n-3)),t.length)};var O=864e5;function H(e){h(1,arguments);var t=1,n=g(e),r=n.getUTCDay(),a=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function q(e){h(1,arguments);var t=g(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=H(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=H(o);return t.getTime()>=a.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function X(e){h(1,arguments);var t=q(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=H(n);return r}var Q=6048e5;function G(e,t){h(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,o=null==a?0:T(a),i=null==n.weekStartsOn?o:T(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=g(e),c=s.getUTCDay(),u=(c<i?7:0)+c-i;return s.setUTCDate(s.getUTCDate()-u),s.setUTCHours(0,0,0,0),s}function J(e,t){h(1,arguments);var n=g(e,t),r=n.getUTCFullYear(),a=t||{},o=a.locale,i=o&&o.options&&o.options.firstWeekContainsDate,s=null==i?1:T(i),c=null==a.firstWeekContainsDate?s:T(a.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(r+1,0,c),u.setUTCHours(0,0,0,0);var l=G(u,t),d=new Date(0);d.setUTCFullYear(r,0,c),d.setUTCHours(0,0,0,0);var A=G(d,t);return n.getTime()>=l.getTime()?r+1:n.getTime()>=A.getTime()?r:r-1}function z(e,t){h(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,o=null==a?1:T(a),i=null==n.firstWeekContainsDate?o:T(n.firstWeekContainsDate),s=J(e,t),c=new Date(0);c.setUTCFullYear(s,0,i),c.setUTCHours(0,0,0,0);var u=G(c,t);return u}var R=6048e5;function Z(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+j(o,2)}function K(e,t){return e%60==0?(e>0?"-":"+")+j(Math.abs(e)/60,2):V(e,t)}function V(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+j(Math.floor(a/60),2)+n+j(a%60,2)}const _={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return L(e,t)},Y:function(e,t,n,r){var a=J(e,r),o=a>0?a:1-a;return"YY"===t?j(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):j(o,t.length)},R:function(e,t){return j(q(e),t.length)},u:function(e,t){return j(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return j(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return j(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return Y(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return j(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=function(e,t){h(1,arguments);var n=g(e),r=G(n,t).getTime()-z(n,t).getTime();return Math.round(r/R)+1}(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):j(a,t.length)},I:function(e,t,n){var r=function(e){h(1,arguments);var t=g(e),n=H(t).getTime()-X(t).getTime();return Math.round(n/Q)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):j(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):U(e,t)},D:function(e,t,n){var r=function(e){h(1,arguments);var t=g(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=n-r;return Math.floor(a/O)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):j(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return j(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});case"eeee":default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return j(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});case"cccc":default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return j(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return S(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):P(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):j(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):j(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):N(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):W(e,t)},S:function(e,t){return F(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return K(a);case"XXXX":case"XX":return V(a);case"XXXXX":case"XXX":default:return V(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return K(a);case"xxxx":case"xx":return V(a);case"xxxxx":case"xxx":default:return V(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+Z(a,":");case"OOOO":default:return"GMT"+V(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+Z(a,":");case"zzzz":default:return"GMT"+V(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return j(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return j((r._originalDate||e).getTime(),t.length)}};function $(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function ee(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const te={p:ee,P:function(e,t){var n,r=e.match(/(P+)(p+)?/),a=r[1],o=r[2];if(!o)return $(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",$(a,t)).replace("{{time}}",ee(o,t))}};function ne(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var re=["D","DD"],ae=["YY","YYYY"];function oe(e){return-1!==re.indexOf(e)}function ie(e){return-1!==ae.indexOf(e)}function se(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var ce=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ue=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,le=/^'([^]*?)'?$/,de=/''/g,Ae=/[a-zA-Z]/;function fe(e,t,n){h(2,arguments);var r=String(t),a=n||{},o=a.locale||I,i=o.options&&o.options.firstWeekContainsDate,s=null==i?1:T(i),c=null==a.firstWeekContainsDate?s:T(a.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=o.options&&o.options.weekStartsOn,l=null==u?0:T(u),d=null==a.weekStartsOn?l:T(a.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var A=g(e);if(!p(A))throw new RangeError("Invalid time value");var f=ne(A),m=M(A,f),C={firstWeekContainsDate:c,weekStartsOn:d,locale:o,_originalDate:A},b=r.match(ue).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,te[t])(e,o.formatLong,C):e})).join("").match(ce).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return me(n);var i=_[r];if(i)return!a.useAdditionalWeekYearTokens&&ie(n)&&se(n,t,e),!a.useAdditionalDayOfYearTokens&&oe(n)&&se(n,t,e),i(m,n,o.localize,C);if(r.match(Ae))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return b}function me(e){return e.match(le)[1].replace(de,"'")}var he=n(543);const ge=function(){const e=function(e){const t=document.getElementById("projectsList"),n=document.createElement("div"),r=document.createElement("div"),a=document.createElement("div");n.classList.add("projectListLI"),r.classList.add("deleteProjectDiv"),a.classList.add("addProjectDiv"),n.setAttribute("id",e.id),r.innerHTML="x",a.innerHTML=e.project_Name,t.prepend(n),n.append(r),n.append(a)},t=document.getElementById("allTasksContainer"),n=function(e){const n=new Image;n.src=he;const r=document.createElement("div");r.classList.add("taskContainer"),e.completed&&r.classList.add("completed"),r.id=e.id;const a=document.createElement("div");a.classList.add("titleTaskContainer");const o=document.createElement("div");o.classList.add("descriptionTaskContainer");const i=document.createElement("div");i.classList.add("dateTaskContainer");const s=document.createElement("div");s.classList.add("deleteTaskContainer"),!1===e?(r.innerHTML="Pick a project and start adding tasks!",t.appendChild(r)):(a.innerHTML=e.title,o.innerHTML=e.description,i.innerHTML=e.dueDate,s.appendChild(n),t.appendChild(r),r.appendChild(a),r.appendChild(i),r.appendChild(o),r.appendChild(s))},r=document.getElementById("titleInput"),a=document.getElementById("dueDateInput"),o=document.getElementById("descriptionInput");return{renderProjectList:function(t){t.forEach((t=>{e(t)}))},clearProjectListStyle:function(){document.querySelectorAll(".projectListLI").forEach((e=>{e.childNodes[1].classList.remove("currentlyselected")}))},addTitle:function(e){document.getElementById("headerOverallTitle").innerHTML=void 0!==e?e.project_Name:"Pick a project!"},prependNewProject:e,renderAllTasks:function(e){if(0===e.tasks.length){if(t.innerHTML="",t.childNodes.length>=1)return;n(!1)}else t.innerHTML="",e.tasks.forEach((e=>n(e)))},createTaskListDiv:function(){document.getElementById("taskInputForm").style.display="flex"},formErrorMessage:function(){[[r,"Title"],[a,"Date"],[o,"Description"]].forEach((e=>{""===e[0].value&&(document.querySelector(`.required${e[1]}`).style.display="block"),e[0].addEventListener("click",(function(){document.querySelector(`.required${e[1]}`).style.display="none"}))}))},getInfoForm:function(){let e=fe(new Date(a.value),"dd/MM/yyyy");return[r.value,e,o.value]},resetForm:function(){let e=fe(new Date,"yyyy/MM/dd");e=e.replace(/\//g,"-"),r.value="",a.value=e,o.value=""},checkMissingItemsForm:function(){return""===r.value||""===o.value||""===a.value},createTask:n,checkForNoTasks:function(){"undefined"===t.childNodes[0].id&&(t.innerHTML="")},changeStatus:function(e){e.classList.contains("completed")?e.classList.remove("completed"):e.classList.add("completed")},setValuesDateForm:function(){let e=fe(new Date,"yyyy/MM/dd");e=e.replace(/\//g,"-"),a.value=e,a.min=e,a.max="3000-12-31"},deleteElement:function(e){e.remove()}}}();class pe{constructor(e){this.project_Name=e,this.tasks=[],this.id=Math.random()}}class Ce{constructor(e,t,n){this.title=e,this.dueDate=t,this.description=n,this.id=`${Math.random()}`,this.completed=!1}}function be(e,t){h(2,arguments);var n=g(e),r=g(t),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}function Be(e,t){h(2,arguments);var n=g(e),r=g(t),a=n.getFullYear()-r.getFullYear(),o=n.getMonth()-r.getMonth();return 12*a+o}function we(e){h(1,arguments);var t=g(e);return t.setHours(23,59,59,999),t}function ye(e){h(1,arguments);var t=g(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(23,59,59,999),t}function ve(e){h(1,arguments);var t=g(e);return we(t).getTime()===ye(t).getTime()}function xe(e,t){h(2,arguments);var n,r=g(e),a=g(t),o=be(r,a),i=Math.abs(Be(r,a));if(i<1)n=0;else{1===r.getMonth()&&r.getDate()>27&&r.setDate(30),r.setMonth(r.getMonth()-o*i);var s=be(r,a)===-o;ve(g(e))&&1===i&&1===be(e,a)&&(s=!1),n=o*(i-Number(s))}return 0===n?0:n}function Ee(e,t){h(2,arguments);var n=g(e),r=g(t);return n.getTime()-r.getTime()}function ke(e,t){h(2,arguments);var n=Ee(e,t)/1e3;return n>0?Math.floor(n):Math.ceil(n)}function Ie(e){return function(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}({},e)}var Te=1440,De=43200;const Me=function(e){return e=e.split("/"),function(e,t){h(2,arguments);var n=g(e),r=g(t);return n.getTime()<r.getTime()}(new Date(e[2],e[1]-1,e[0]),new Date)?"In the past":`${function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};h(2,arguments);var r=n.locale||I;if(!r.formatDistance)throw new RangeError("locale must contain formatDistance property");var a=be(e,t);if(isNaN(a))throw new RangeError("Invalid time value");var o,i,s=Ie(n);s.addSuffix=Boolean(n.addSuffix),s.comparison=a,a>0?(o=g(t),i=g(e)):(o=g(e),i=g(t));var c,u=ke(i,o),l=(ne(i)-ne(o))/1e3,d=Math.round((u-l)/60);if(d<2)return n.includeSeconds?u<5?r.formatDistance("lessThanXSeconds",5,s):u<10?r.formatDistance("lessThanXSeconds",10,s):u<20?r.formatDistance("lessThanXSeconds",20,s):u<40?r.formatDistance("halfAMinute",null,s):u<60?r.formatDistance("lessThanXMinutes",1,s):r.formatDistance("xMinutes",1,s):0===d?r.formatDistance("lessThanXMinutes",1,s):r.formatDistance("xMinutes",d,s);if(d<45)return r.formatDistance("xMinutes",d,s);if(d<90)return r.formatDistance("aboutXHours",1,s);if(d<Te){var A=Math.round(d/60);return r.formatDistance("aboutXHours",A,s)}if(d<2520)return r.formatDistance("xDays",1,s);if(d<De){var f=Math.round(d/Te);return r.formatDistance("xDays",f,s)}if(d<86400)return c=Math.round(d/De),r.formatDistance("aboutXMonths",c,s);if((c=xe(i,o))<12){var m=Math.round(d/De);return r.formatDistance("xMonths",m,s)}var p=c%12,C=Math.floor(c/12);return p<3?r.formatDistance("aboutXYears",C,s):p<9?r.formatDistance("overXYears",C,s):r.formatDistance("almostXYears",C+1,s)}(new Date(e[2],e[1]-1,e[0]),new Date,{addSuffux:!0})} remaining`};!function(){let e="LOCAL_STORAGE_CURRENT_ITEM",t="LOCAL_STORAGE_CURRENT_PROJECT",n=[],r=localStorage.getItem(t);console.log(r);const a=function(e){return n.find((t=>t.id==e))},o=(null!=localStorage.getItem(e)&&(n=JSON.parse(localStorage.getItem(e))),function(){const t=JSON.stringify(n);localStorage.setItem(e,t)}),i=function(e){ge.createTaskListDiv(),ge.renderAllTasks(e)};var s;s=function(e){const s=document.getElementById("addProjectInput");if((e.target.classList.contains("addProjectDiv")||e.target.classList.contains("projectListLI"))&&(r=e.target.classList.contains("addProjectDiv")?e.target.parentNode.id:e.target.id,ge.addTitle(a(r)),ge.clearProjectListStyle(),document.getElementById(r).childNodes[1].classList.add("currentlyselected"),localStorage.setItem(t,r),i(a(r))),e.target.classList.contains("deleteProjectDiv"))return function(e){let t=n.findIndex((t=>t.id==e));n.splice(t,1),o()}(e.target.parentNode.id),ge.deleteElement(e.target.parentNode),void ge.addTitle(a(r));if("addProjectButton"===e.target.id){if(""===s.value)return;!function(e){let t=new pe(e);n.push(t),ge.prependNewProject(t),o()}(s.value),s.value=""}},document.getElementById("projectsContainer").addEventListener("click",(e=>{e.preventDefault(),s(e)})),document.getElementById("submitTaskInputButton").addEventListener("click",(function(e){e.preventDefault(),function(e){if(void 0===a(r)&&console.log("There is no project to add a task to"),ge.formErrorMessage(),ge.checkMissingItemsForm())return;ge.checkForNoTasks();const t=ge.getInfoForm();let n=new Ce(t[0],t[1],t[2]);a(r).tasks.push(n),ge.createTask(n),ge.checkForNoTasks(),ge.resetForm(),o()}()})),function(){let e;document.getElementById("list").addEventListener("mouseover",(function(t){!function(t){if(t.target.parentNode.classList.contains("taskContainer")){const n=t.target.parentNode.id;e=a(r).tasks.filter((e=>e.id===t.target.parentNode.id)),console.log(n),e[0].completed?t.target.parentNode.children[1].innerHTML="Completed":t.target.parentNode.children[1].innerHTML=Me(e[0].dueDate)}}(t)})),document.getElementById("list").addEventListener("mouseout",(function(t){!function(t){t.target.parentNode.classList.contains("taskContainer")&&(t.target.parentNode.children[1].innerHTML=e[0].dueDate)}(t)})),document.getElementById("list").addEventListener("click",(function(t){!function(t){if(t.target.classList.contains("deleteTaskContainer")||t.target.parentNode.classList.contains("deleteTaskContainer")){let s;t.target.parentNode.classList.contains("taskContainer")?s=t.target.parentNode:t.target.parentNode.parentNode.classList.contains("taskContainer")&&(s=t.target.parentNode.parentNode),function(e,t){let r=n.findIndex((e=>e.id==t)),a=n[r].tasks.findIndex((t=>t.id===e));n[r].tasks.splice(a,1),o()}(e[0].id,r),ge.deleteElement(s),0===a(r).tasks.length&&i(a(r))}t.target.parentNode.classList.contains("taskContainer")&&(ge.changeStatus(t.target.parentNode),e[0].completed?(t.target.parentNode.children[1].innerHTML=Me(e[0].dueDate),e[0].completed=!1):(t.target.parentNode.children[1].innerHTML="Completed",e[0].completed=!0),o())}(t)}))}(),ge.setValuesDateForm(),ge.renderProjectList(n),ge.addTitle(a(r)),null!=r&&0!=n.length&&(document.getElementById(r).childNodes[1].classList.add("currentlyselected"),i(a(r))),document.getElementById("headerOverallTitle").addEventListener("click",(function(){console.log(n)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,