(()=>{"use strict";var e={982:(e,n,t)=>{t.d(n,{Z:()=>A});var r=t(15),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Rubik:wght@300&display=swap);"]),o.push([e.id,'* {\n  margin: 0px;\n  padding: 0px;\n}\n\nbody {\n  font-family: "Rubik", sans-serif;\n  font-weight: 500;\n}\n\n.header {\n  width: 100vw;\n  height: 10vh;\n  display: -ms-grid;\n  display: grid;\n  grid: ". . ." 1fr\r / 1fr 3.5fr 1fr;\n  background-color: #718355;\n  color: #e9f5db;\n  font-size: 3rem;\n}\n\n.header__title {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  height: 100%;\n}\n\n.header__projectTitle {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  height: 100%;\n  padding-right: 2.5%;\n}\n\n.header__settings {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: end;\n      -ms-flex-pack: end;\n          justify-content: flex-end;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  margin-right: 20px;\n}\n\n.header__settings svg {\n  height: 40px;\n}\n\n.header__settings:hover {\n  cursor: pointer;\n  color: black;\n}\n\n.mainContainerFlex {\n  width: 100vw;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  height: 88vh;\n}\n\n.mainContainer {\n  height: 95%;\n  display: -ms-grid;\n  display: grid;\n  grid: ". . ." 1fr\r / 1fr 3.5fr 1fr;\n}\n\n.mainContainer__projectListDiv {\n  height: 100%;\n  max-width: 350px;\n  min-width: 350px;\n  width: 22%;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n\n.mainContainer__projectListDiv__input {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  width: 80%;\n}\n\n.mainContainer__projectListDiv__input form {\n  width: 100%;\n}\n\n.mainContainer__projectListDiv__input form input {\n  margin-top: 5px;\n  font-size: 1.5rem;\n  width: 100%;\n  background-color: #718355;\n  border: none;\n  height: 30px;\n  color: #e9f5db;\n  border-radius: 5px;\n  padding: 5px 0px;\n  text-align: center;\n}\n\n.mainContainer__projectListDiv__input form input::-webkit-input-placeholder {\n  color: #e9f5db;\n}\n\n.mainContainer__projectListDiv__input form input:-ms-input-placeholder {\n  color: #e9f5db;\n}\n\n.mainContainer__projectListDiv__input form input::-ms-input-placeholder {\n  color: #e9f5db;\n}\n\n.mainContainer__projectListDiv__input form input::placeholder {\n  color: #e9f5db;\n}\n\n.mainContainer__projectListDiv__input form button {\n  position: absolute;\n  border: none;\n  background-color: rgba(0, 0, 0, 0);\n}\n\n.mainContainer__projectListDiv__projectList {\n  overflow: auto;\n  width: 80%;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainer {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  width: 100%;\n  -webkit-box-pack: justify;\n      -ms-flex-pack: justify;\n          justify-content: space-between;\n  border-radius: 5px;\n  min-height: 40px;\n  margin-top: 5px;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainer .projectName {\n  padding-left: 3%;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  width: 85%;\n  border-radius: 5px 0px 0px 5px;\n  font-size: 1.5rem;\n  background-color: #f6f2f0;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainer .projectName:hover {\n  cursor: pointer;\n  background-color: #718355;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainer .projectDeleteButton {\n  color: #f6f2f0;\n  width: 15%;\n  aspect-ratio: 1/1;\n  border-radius: 0px 5px 5px 0px;\n  background-color: #f6f2f0;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainer .projectDeleteButton:hover {\n  cursor: pointer;\n  color: #ee5a5a;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainer:hover .projectName {\n  color: #e9f5db;\n  background-color: #718355;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainer:hover .projectDeleteButton {\n  background-color: #718355;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainerStatic {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  width: 100%;\n  -webkit-box-pack: justify;\n      -ms-flex-pack: justify;\n          justify-content: space-between;\n  height: 40px;\n  margin-top: 5px;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainerStatic .projectName {\n  border-radius: 5px;\n  padding-left: 3%;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  width: 100%;\n  font-size: 1.5rem;\n  background-color: #f6f2f0;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainerStatic .projectName:hover {\n  cursor: pointer;\n  color: #e9f5db;\n  background-color: #718355;\n}\n\n.mainContainer__taskListDiv {\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.mainContainer__taskListDiv__container {\n  width: 100%;\n}\n\n.mainContainer__taskListDiv__container .headerForObjects {\n  font-size: 2rem;\n  height: 2.5rem;\n  margin-left: 25px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  margin: 10px 0px 5px 25px;\n  color: #718355;\n}\n\n.mainContainer__taskListDiv__container .taskContainer {\n  margin-top: 3px;\n  width: 100%;\n  min-height: 35px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  background-color: #e9f5db;\n  color: #718355;\n  border-radius: 5px;\n  padding: 5px 0px;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskLineDividerDiv {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  min-width: 20px;\n  min-height: 35px;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskLineDividerDiv .taskLineDivider {\n  min-height: 100%;\n  width: 2px;\n  background-color: #8292694f;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskTitle {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  font-weight: bold;\n  width: 10%;\n  margin-left: 10px;\n  min-width: 114px;\n  -webkit-box-pack: end;\n      -ms-flex-pack: end;\n          justify-content: flex-end;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskDate {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  min-width: 90px;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskNote {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  width: 100%;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskButtons {\n  margin-right: 10px;\n  min-width: 60px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskButtons .taskDelete {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  width: 35px;\n  color: #7183551e;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskButtons .taskDelete:hover {\n  cursor: pointer;\n  color: #ee5a5a !important;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskButtons .taskEdit {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  width: 25px;\n  color: #7183551e;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskButtons .taskEdit:hover {\n  cursor: pointer;\n  color: black !important;\n}\n\n.mainContainer__taskListDiv__container .taskContainer:hover {\n  cursor: pointer;\n}\n\n.mainContainer__taskListDiv__container .taskContainer:hover .taskButtons .taskDelete {\n  color: #718355;\n}\n\n.mainContainer__taskListDiv__container .taskContainer:hover .taskButtons .taskEdit {\n  color: #718355;\n}\n\n.mainContainer__taskInputDiv {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  max-width: 350px;\n  min-width: 350px;\n}\n\n.mainContainer__taskInputDiv #newTaskForm {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  width: 80%;\n  color: #718355;\n}\n\n.mainContainer__taskInputDiv #newTaskForm h2 {\n  text-align: center;\n}\n\n.mainContainer__taskInputDiv #newTaskForm input {\n  border: none;\n  background-color: #718355;\n  font-size: 1.2rem;\n  height: 2.5rem;\n  margin-bottom: 10px;\n  color: #e9f5db;\n  padding: 0px 10px;\n  border-radius: 5px;\n}\n\n.mainContainer__taskInputDiv #newTaskForm .inputTaskHeader {\n  font-weight: bold;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: justify;\n      -ms-flex-pack: justify;\n          justify-content: space-between;\n}\n\n.mainContainer__taskInputDiv #newTaskForm .inputTaskHeader .taskError {\n  display: none;\n  font-weight: 500;\n  color: red;\n}\n\n.mainContainer__taskInputDiv #newTaskForm button {\n  border: none;\n  font-size: 1.2rem;\n  margin-top: 10px;\n  border-radius: 10px;\n  border: #718355 2px solid;\n  color: #718355;\n  height: 2.5rem;\n  background-color: #e9f5db;\n}\n\n.mainContainer__taskInputDiv #newTaskForm button:hover {\n  cursor: pointer;\n}\n\n.dangerColour {\n  background-color: #ee5a5a !important;\n  font-size: 2rem;\n}\n\n.dangerColour::-webkit-input-placeholder {\n  color: black !important;\n}\n\n.dangerColour:-ms-input-placeholder {\n  color: black !important;\n}\n\n.dangerColour::-ms-input-placeholder {\n  color: black !important;\n}\n\n.dangerColour::placeholder {\n  color: black !important;\n}\n\n.currentlySelected {\n  background-color: #718355 !important;\n}\n\n.currentlySelectedFontColour {\n  color: #e9f5db !important;\n}\n\n.completedTask {\n  background-color: #b4afaf !important;\n  color: rgba(0, 0, 0, 0.507) !important;\n}\n\nfooter {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  background-color: #718355;\n  color: #e9f5db;\n  min-height: 2vh;\n  width: 100vw;\n}\n\n.confirmDeleteProjectModal {\n  position: absolute;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.274);\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  color: #e9f5db;\n  display: none;\n}\n\n.confirmDeleteProjectModal .deleteConfirmationModal {\n  border-radius: 10px;\n  background-color: #718355;\n  width: 20vw;\n  height: 20vh;\n  display: -ms-grid;\n  display: grid;\n  padding: 10px;\n  grid: "deleteModalParagraph deleteModalParagraph" 1fr\r "deleteModalConfirm deleteModalDeny" 1fr\r / 1fr 1fr;\n}\n\n.confirmDeleteProjectModal .deleteModalParagraph {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  grid-area: deleteModalParagraph;\n  text-align: center;\n  font-size: 1.2rem;\n}\n\n.confirmDeleteProjectModal .deleteModalConfirm {\n  grid-area: deleteModalConfirm;\n  background-color: #a0e0a0;\n  margin-right: 10px;\n}\n\n.confirmDeleteProjectModal .deleteModalConfirm:hover {\n  cursor: pointer;\n  background-color: #e9f5db;\n}\n\n.confirmDeleteProjectModal .deleteModalDeny {\n  grid-area: deleteModalDeny;\n  background-color: #f33636;\n  margin-left: 10px;\n}\n\n.confirmDeleteProjectModal .deleteModalDeny:hover {\n  cursor: pointer;\n  background-color: #ee5a5a;\n}\n\n.confirmDeleteProjectModal .deleteButtonsModal {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  height: 50%;\n  border: none;\n  font-size: 2;\n}\n/*# sourceMappingURL=style.css.map */',"",{version:3,sources:["webpack://./src/style/style.scss","webpack://./src/style/style.css"],names:[],mappings:"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",sourceRoot:""}]);const A=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var A=0;A<e.length;A++){var s=[].concat(e[A]);r&&a[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),n.push(s))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,a=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,i=[],o=!0,A=!1;try{for(t=t.call(e);!(o=(r=t.next()).done)&&(i.push(r.value),!n||i.length!==n);o=!0);}catch(e){A=!0,a=e}finally{try{o||null==t.return||t.return()}finally{if(A)throw a}}return i}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],o=a[3];if(!o)return i;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),c="/*# ".concat(s," */"),l=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[i].concat(l).concat([c]).join("\n")}return[i].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},o=[],A=0;A<e.length;A++){var s=e[A],c=r.base?s[0]+r.base:s[0],l=i[c]||0,u="".concat(c," ").concat(l);i[c]=l+1;var d=t(u),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(n[d].references++,n[d].updater(f)):n.push({identifier:u,updater:a(f,r),references:1}),o.push(u)}return o}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var A=t(i[o]);n[A].references--}for(var s=r(e,a),c=0;c<i.length;c++){var l=t(i[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r=t.css,a=t.media,i=t.sourceMap;a?e.setAttribute("media",a):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),i=t(569),o=t.n(i),A=t(565),s=t.n(A),c=t(216),l=t.n(c),u=t(589),d=t.n(u),f=t(982),m={};m.styleTagTransform=d(),m.setAttributes=s(),m.insert=o().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=l(),n()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;class B{constructor(e,n,t,r){this.project=r,this.title=e,this.date=n,this.note=t,this.completed=!1,this.id=Math.random()}}function C(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function p(e){C(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function h(e){C(1,arguments);var n=p(e);return!isNaN(n)}var g={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function E(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,r=e.formats[t]||e.formats[e.defaultWidth];return r}}var b,y={date:E({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:E({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:E({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},w={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function v(e){return function(n,t){var r,a=t||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,o=a.width?String(a.width):i;r=e.formattingValues[o]||e.formattingValues[i]}else{var A=e.defaultWidth,s=a.width?String(a.width):e.defaultWidth;r=e.values[s]||e.values[A]}return r[e.argumentCallback?e.argumentCallback(n):n]}}function x(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=n.match(a);if(!i)return null;var o,A=i[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?D(s,(function(e){return e.test(A)})):k(s,(function(e){return e.test(A)}));o=e.valueCallback?e.valueCallback(c):c,o=t.valueCallback?t.valueCallback(o):o;var l=n.slice(A.length);return{value:o,rest:l}}}function k(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function D(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}const _={code:"en-US",formatDistance:function(e,n,t){var r;return t=t||{},r="string"==typeof g[e]?g[e]:1===n?g[e].one:g[e].other.replace("{{count}}",n),t.addSuffix?t.comparison>0?"in "+r:r+" ago":r},formatLong:y,formatRelative:function(e,n,t,r){return w[e]},localize:{ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:v({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:v({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:v({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:v({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:v({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(b={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(b.matchPattern);if(!t)return null;var r=t[0],a=e.match(b.parsePattern);if(!a)return null;var i=b.valueCallback?b.valueCallback(a[0]):a[0];i=n.valueCallback?n.valueCallback(i):i;var o=e.slice(r.length);return{value:i,rest:o}}),era:x({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:x({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:x({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:x({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:x({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function M(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function T(e,n){C(2,arguments);var t=p(e).getTime(),r=M(n);return new Date(t+r)}function j(e,n){C(2,arguments);var t=M(n);return T(e,-t)}function L(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}const U=function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return L("yy"===n?r%100:r,n.length)},S=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):L(t+1,2)},P=function(e,n){return L(e.getUTCDate(),n.length)},Y=function(e,n){return L(e.getUTCHours()%12||12,n.length)},W=function(e,n){return L(e.getUTCHours(),n.length)},N=function(e,n){return L(e.getUTCMinutes(),n.length)},O=function(e,n){return L(e.getUTCSeconds(),n.length)},I=function(e,n){var t=n.length,r=e.getUTCMilliseconds();return L(Math.floor(r*Math.pow(10,t-3)),n.length)};var q=864e5;function F(e){C(1,arguments);var n=1,t=p(e),r=t.getUTCDay(),a=(r<n?7:0)+r-n;return t.setUTCDate(t.getUTCDate()-a),t.setUTCHours(0,0,0,0),t}function z(e){C(1,arguments);var n=p(e),t=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var a=F(r),i=new Date(0);i.setUTCFullYear(t,0,4),i.setUTCHours(0,0,0,0);var o=F(i);return n.getTime()>=a.getTime()?t+1:n.getTime()>=o.getTime()?t:t-1}function H(e){C(1,arguments);var n=z(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var r=F(t);return r}var G=6048e5;function R(e,n){C(1,arguments);var t=n||{},r=t.locale,a=r&&r.options&&r.options.weekStartsOn,i=null==a?0:M(a),o=null==t.weekStartsOn?i:M(t.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=p(e),s=A.getUTCDay(),c=(s<o?7:0)+s-o;return A.setUTCDate(A.getUTCDate()-c),A.setUTCHours(0,0,0,0),A}function X(e,n){C(1,arguments);var t=p(e,n),r=t.getUTCFullYear(),a=n||{},i=a.locale,o=i&&i.options&&i.options.firstWeekContainsDate,A=null==o?1:M(o),s=null==a.firstWeekContainsDate?A:M(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=new Date(0);c.setUTCFullYear(r+1,0,s),c.setUTCHours(0,0,0,0);var l=R(c,n),u=new Date(0);u.setUTCFullYear(r,0,s),u.setUTCHours(0,0,0,0);var d=R(u,n);return t.getTime()>=l.getTime()?r+1:t.getTime()>=d.getTime()?r:r-1}function Z(e,n){C(1,arguments);var t=n||{},r=t.locale,a=r&&r.options&&r.options.firstWeekContainsDate,i=null==a?1:M(a),o=null==t.firstWeekContainsDate?i:M(t.firstWeekContainsDate),A=X(e,n),s=new Date(0);s.setUTCFullYear(A,0,o),s.setUTCHours(0,0,0,0);var c=R(s,n);return c}var Q=6048e5;function J(e,n){var t=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),i=r%60;if(0===i)return t+String(a);var o=n||"";return t+String(a)+o+L(i,2)}function V(e,n){return e%60==0?(e>0?"-":"+")+L(Math.abs(e)/60,2):K(e,n)}function K(e,n){var t=n||"",r=e>0?"-":"+",a=Math.abs(e);return r+L(Math.floor(a/60),2)+t+L(a%60,2)}const $={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});case"GGGG":default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),a=r>0?r:1-r;return t.ordinalNumber(a,{unit:"year"})}return U(e,n)},Y:function(e,n,t,r){var a=X(e,r),i=a>0?a:1-a;return"YY"===n?L(i%100,2):"Yo"===n?t.ordinalNumber(i,{unit:"year"}):L(i,n.length)},R:function(e,n){return L(z(e),n.length)},u:function(e,n){return L(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return L(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return L(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return S(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return L(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var a=function(e,n){C(1,arguments);var t=p(e),r=R(t,n).getTime()-Z(t,n).getTime();return Math.round(r/Q)+1}(e,r);return"wo"===n?t.ordinalNumber(a,{unit:"week"}):L(a,n.length)},I:function(e,n,t){var r=function(e){C(1,arguments);var n=p(e),t=F(n).getTime()-H(n).getTime();return Math.round(t/G)+1}(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):L(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):P(e,n)},D:function(e,n,t){var r=function(e){C(1,arguments);var n=p(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=n.getTime(),a=t-r;return Math.floor(a/q)+1}(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):L(r,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});case"EEEE":default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(i);case"ee":return L(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(a,{width:"short",context:"formatting"});case"eeee":default:return t.day(a,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(i);case"cc":return L(i,n.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(a,{width:"narrow",context:"standalone"});case"cccccc":return t.day(a,{width:"short",context:"standalone"});case"cccc":default:return t.day(a,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),a=0===r?7:r;switch(n){case"i":return String(a);case"ii":return L(a,n.length);case"io":return t.ordinalNumber(a,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});case"iiii":default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return Y(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):W(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):L(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):L(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):N(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):O(e,n)},S:function(e,n){return I(e,n)},X:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(n){case"X":return V(a);case"XXXX":case"XX":return K(a);case"XXXXX":case"XXX":default:return K(a,":")}},x:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return V(a);case"xxxx":case"xx":return K(a);case"xxxxx":case"xxx":default:return K(a,":")}},O:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+J(a,":");case"OOOO":default:return"GMT"+K(a,":")}},z:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+J(a,":");case"zzzz":default:return"GMT"+K(a,":")}},t:function(e,n,t,r){var a=r._originalDate||e;return L(Math.floor(a.getTime()/1e3),n.length)},T:function(e,n,t,r){return L((r._originalDate||e).getTime(),n.length)}};function ee(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});case"PPPP":default:return n.date({width:"full"})}}function ne(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});case"pppp":default:return n.time({width:"full"})}}const te={p:ne,P:function(e,n){var t,r=e.match(/(P+)(p+)?/),a=r[1],i=r[2];if(!i)return ee(e,n);switch(a){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;case"PPPP":default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",ee(a,n)).replace("{{time}}",ne(i,n))}};function re(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var ae=["D","DD"],ie=["YY","YYYY"];function oe(e){return-1!==ae.indexOf(e)}function Ae(e){return-1!==ie.indexOf(e)}function se(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var ce=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,le=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ue=/^'([^]*?)'?$/,de=/''/g,fe=/[a-zA-Z]/;function me(e,n,t){C(2,arguments);var r=String(n),a=t||{},i=a.locale||_,o=i.options&&i.options.firstWeekContainsDate,A=null==o?1:M(o),s=null==a.firstWeekContainsDate?A:M(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=i.options&&i.options.weekStartsOn,l=null==c?0:M(c),u=null==a.weekStartsOn?l:M(a.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!i.localize)throw new RangeError("locale must contain localize property");if(!i.formatLong)throw new RangeError("locale must contain formatLong property");var d=p(e);if(!h(d))throw new RangeError("Invalid time value");var f=re(d),m=j(d,f),B={firstWeekContainsDate:s,weekStartsOn:u,locale:i,_originalDate:d},g=r.match(le).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,te[n])(e,i.formatLong,B):e})).join("").match(ce).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return Be(t);var o=$[r];if(o)return!a.useAdditionalWeekYearTokens&&Ae(t)&&se(t,n,e),!a.useAdditionalDayOfYearTokens&&oe(t)&&se(t,n,e),o(m,t,i.localize,B);if(r.match(fe))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("");return g}function Be(e){return e.match(ue)[1].replace(de,"'")}const Ce=document.querySelector(".mainContainer__projectListDiv__projectList"),pe=document.querySelector(".mainContainer__taskListDiv__container"),he=document.querySelector(".confirmDeleteProjectModal"),ge=function(){const e=function(e){const n=document.createElement("div"),t=document.createElement("div");n.setAttribute("id",e),n.classList.add("mainContainer__projectListDiv__projectList__projectContainer"),t.classList.add("projectName"),e=e.charAt(0).toUpperCase()+e.slice(1),t.innerHTML=e,n.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 projectDeleteButton"viewBox="0 0 20 20" fill="currentColor"> <path fill-rule="evenodd" d="M6.707 4.879A3 3 0 018.828 4H15a3 3 0 013 3v6a3 3 0 01-3 3H8.828a3 3 0 01-2.12-.879l-4.415-4.414a1 1 0 010-1.414l4.414-4.414zm4 2.414a1 1 0 00-1.414 1.414L10.586 10l-1.293 1.293a1 1 0 101.414 1.414L12 11.414l1.293 1.293a1 1 0 001.414-1.414L13.414 10l1.293-1.293a1 1 0 00-1.414-1.414L12 8.586l-1.293-1.293z" clip-rule="evenodd" /> </svg>',Ce.appendChild(n),n.prepend(t)};return{renderAll:function(n){n.forEach((n=>e(n)))},renderSingle:e}}(),Ee=function(){const e=function(e){const n=function(e,n){const t=document.createElement("div");return t.classList.add(e),null!=n&&(t.innerHTML=n),t},t=function(){const e=n("taskLineDividerDiv"),t=n("taskLineDivider");return e.appendChild(t),e},r=e.date.split("-"),a=`${r[2]}/${r[1]}/${r[0]}`,i=n("taskContainer"),o=n("taskTitle",e.title),A=n("taskDate",a),s=n("taskNote",e.note),c=n("taskButtons"),l=n("taskEdit"),u=n("taskDelete");l.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 taskEditButton" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path class="taskEditButton" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" /></svg>',u.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 taskDeleteButton"viewBox="0 0 20 20" fill="currentColor"> <path class="taskDeleteButton" fill-rule="evenodd" d="M6.707 4.879A3 3 0 018.828 4H15a3 3 0 013 3v6a3 3 0 01-3 3H8.828a3 3 0 01-2.12-.879l-4.415-4.414a1 1 0 010-1.414l4.414-4.414zm4 2.414a1 1 0 00-1.414 1.414L10.586 10l-1.293 1.293a1 1 0 101.414 1.414L12 11.414l1.293 1.293a1 1 0 001.414-1.414L13.414 10l1.293-1.293a1 1 0 00-1.414-1.414L12 8.586l-1.293-1.293z" clip-rule="evenodd" /> </svg>',e.completed&&i.classList.add("completedTask");const d=[o,t(),A,t(),s,t(),c];pe.appendChild(i),d.forEach((e=>i.appendChild(e))),d.forEach((n=>{n.classList.contains("taskButtons")||n.parentNode.setAttribute("id",e.id)})),c.appendChild(l),c.appendChild(u)},n=function(n){n.forEach((n=>e(n)))},t=function(){pe.innerHTML=""};return{renderSingle:e,renderArray:n,clearTasks:t,clearAndRenderTasks:function(e){t(),n(e)},changeStatus:function(e){e.classList.contains("completedTask")?e.classList.remove("completedTask"):e.classList.add("completedTask")},clearAndRenderWithHeaders:function(n){t();const r=[];n.forEach((e=>r.push(e.project))),[...new Set(r)].forEach((t=>{const r=n.filter((e=>e.project===t));"all"===t&&(t="unallocated tasks");const a=document.createElement("div");a.innerHTML=t.charAt(0).toUpperCase()+t.slice(1),a.classList.add("headerForObjects"),pe.appendChild(a),r.forEach((n=>e(n)))}))}}}(),be=function(){const e=function(){const e=Ce.children.length;for(let n=0;n<e;n++)Ce.children[n].children[0].classList.remove("currentlySelected"),Ce.children[n].children[0].classList.remove("currentlySelectedFontColour"),null!=Ce.children[n].children[1]&&(Ce.children[n].children[1].classList.remove("currentlySelected"),Ce.children[n].children[1].classList.remove("currentlySelectedFontColour"))};return{addCurrentlySelected:function(n){const t=n.parentNode.children.length;e(),n.parentNode.children[0].classList.add("currentlySelectedFontColour");for(let e=0;e<t;e++)n.parentNode.children[e].classList.add("currentlySelected")},removeCurrentlySelected:e,resetCurrentlySelected:function(){document.getElementById("reset_Style").classList.add("currentlySelected","currentlySelectedFontColour")},removeDeleteConfirmModal:function(){he.style.display="none"}}}(),ye=function(){const e=document.querySelector(".header__projectTitle"),n=document.getElementById("dateInput");return document.getElementById("completedNumberOfTasks"),{changeTitle:function(n){e.innerHTML=n.charAt(0).toUpperCase()+n.slice(1)},setDateInputParameters:function(){const e=me(new Date,"yyyy-MM-dd").split("-");n.setAttribute("min",`${e[0]}-${e[1]}-${e[2]}`),n.setAttribute("value",`${e[0]}-${e[1]}-${e[2]}`)},currentDate:function(){return me(new Date,"yyyy-MM-dd")}}}();function we(e,n){C(2,arguments);var t=p(e),r=p(n);return t.getTime()<r.getTime()}const ve=function(){const e=document.getElementById("submitProjectButton"),n=document.querySelector(".mainContainer__projectListDiv__projectList"),t=document.querySelector(".mainContainer__taskListDiv__container"),r=document.getElementById("taskSubmit"),a=document.querySelector(".confirmDeleteProjectModal");return{newProject:function(n){e.addEventListener("click",(function(e){e.preventDefault(),n()}))},chooseProject:function(e){n.addEventListener("click",(function(n){n.target.classList.contains("projectName")&&e(n)}))},deleteProject:function(e){n.addEventListener("click",(function(n){(n.target.classList.contains("projectDeleteButton")||n.target.parentNode.classList.contains("projectDeleteButton"))&&e(n)}))},newTask:function(e){r.addEventListener("click",(function(n){n.preventDefault(),e()}))},taskEditDelete:function(e){t.addEventListener("click",(function(n){e(n)}))},confirmDelete:function(e){a.style.display="flex",a.addEventListener("click",(function(n){e(n)}))}}}(),xe=function(){const e=document.getElementById("projectInput");return{projectName:function(){const n=e.value.toLowerCase();return e.value="",n},form:function(){const e=document.getElementById("titleInput"),n=document.getElementById("dateInput"),t=document.getElementById("noteInput"),r=me(new Date,"yyyy-MM-dd").split("-"),a=n.value.split("-"),i=we(new Date(a[0],a[1],a[2]),new Date(r[0],r[1],r[2]));let o=0;if(""===e.value&&(console.log("fix title"),o++),""===t.value&&(console.log("fix note"),o++),i&&(console.log("The date is before"),o++),o>0)return null;const A=[e.value,n.value,t.value];return e.value="",n.value=`${r[0]}-${r[1]}-${r[2]}`,t.value="",A}}}(),ke=function(){let e="LOCAL_STORAGE_CURRENT_TASKS",n="LOCAL_STORAGE_CURRENT_PROJECTS",t="LOCAL_STORAGE_CURRENTLY_SELEC_PROJECT";return{saveProjects:function(e){const t=JSON.stringify(e);localStorage.setItem(n,t)},saveTasks:function(n){const t=JSON.stringify(n);localStorage.setItem(e,t)},saveStarredProject:function(e){const n=JSON.stringify(e);localStorage.setItem(t,n)},loadProjects:function(){return JSON.parse(localStorage.getItem(n))},loadTasks:function(){return JSON.parse(localStorage.getItem(e))},loadStarredProject:function(){return JSON.parse(localStorage.getItem(t))}}}();function De(e,n){C(2,arguments);var t=p(e),r=M(n);return isNaN(r)?new Date(NaN):r?(t.setDate(t.getDate()+r),t):t}function _e(e,n){C(2,arguments);var t=p(e),r=M(n);if(isNaN(r))return new Date(NaN);if(!r)return t;var a=t.getDate(),i=new Date(t.getTime());i.setMonth(t.getMonth()+r+1,0);var o=i.getDate();return a>=o?i:(t.setFullYear(i.getFullYear(),i.getMonth(),a),t)}const Me=function(){const e=me(new Date,"yyyy-MM-dd");return{byProject:function(e,n){return e.filter((e=>e.project===n))},byPreset:function(n,t){if("today"===t)return n.filter((n=>n.date===e));if("this week"===t){const e=me(function(e,n){if(C(2,arguments),!n||"object"!=typeof n)return new Date(NaN);var t=n.years?M(n.years):0,r=n.months?M(n.months):0,a=n.weeks?M(n.weeks):0,i=n.days?M(n.days):0,o=n.hours?M(n.hours):0,A=n.minutes?M(n.minutes):0,s=n.seconds?M(n.seconds):0,c=p(e),l=r||t?_e(c,r+12*t):c,u=i||a?De(l,i+7*a):l,d=1e3*(s+60*(A+60*o));return new Date(u.getTime()+d)}(new Date,{days:7}),"yyyy-MM-dd").split("-");return n.filter((n=>{const t=n.date.split("-");return we(new Date(t[0],t[1],t[2]),new Date(e[0],e[1],e[2]))}))}}}}();!function(){let e=[{project:"example project",title:"Example Task",date:ye.currentDate(),note:"This is an example task.",completed:!1,id:1}],n=["example project"],t="all";const r=n=>{const t=e.map((e=>e.id==n)).indexOf(!0);e.splice(t,1)},a=n=>{if("this week"!==n&&"today"!==n)if("all"!==n){const n=Me.byProject(e,t);Ee.clearAndRenderTasks(n)}else Ee.clearAndRenderWithHeaders(e);else{const n=Me.byPreset(e,t);Ee.clearAndRenderWithHeaders(n)}};ve.newProject((()=>{const e=xe.projectName().toLowerCase();"all"!==e&&"this week"!==e&&"today"!==e?-1==n.indexOf(e)?""!==e?(ge.renderSingle(e),n.push(e),ke.saveProjects(n)):console.log("Needs an input"):console.log("Can't use the same name"):console.log("Can't use one of the filter names")})),ve.chooseProject((e=>{const n=e.target.parentNode.id;t=n.toLowerCase(),ye.changeTitle(t),be.addCurrentlySelected(e.target),a(t)})),ve.deleteProject((i=>{const o=function(e,i,o){e.remove(),n.splice(n.indexOf(i),1),o.forEach((e=>{r(e.id)})),s===t&&(t="all",ye.changeTitle(t),be.resetCurrentlySelected()),a(t),ke.saveProjects(n)},A=i.target.closest(".mainContainer__projectListDiv__projectList__projectContainer"),s=A.id,c=e.filter((e=>{if(e.project===s)return e.id}));0!==c.length?ve.confirmDelete((function(e){e.target.classList.contains("deleteModalConfirm")?(o(A,s,c),be.removeDeleteConfirmModal()):(e.target.classList.contains("deleteModalDeny")||e.target.classList.contains("confirmDeleteProjectModal"))&&be.removeDeleteConfirmModal()})):o(A,s,c)})),ve.newTask((()=>{const n=xe.form();if(null===n)return;const r=new B(n[0],n[1],n[2],t);"today"!==t&&"this week"!==t||(r.project="all"),e.push(r),a(t),ke.saveTasks(e)})),ve.taskEditDelete((n=>{let i=n.target.closest(".taskContainer");null!==i&&(n.target.classList.contains("taskDeleteButton")?(r(i.id),a(t),ke.saveTasks(e)):n.target.classList.contains("taskEditButton")?console.log("edit"):((n=>{Ee.changeStatus(n);const t=e.map((e=>e.id==n.id)).indexOf(!0);e[t].completed?e[t].completed=!1:e[t].completed=!0})(i),ke.saveTasks(e)))})),null!=ke.loadProjects()&&(n=ke.loadProjects()),null!=ke.loadTasks()&&(e=ke.loadTasks()),ye.setDateInputParameters(),a(t),ge.renderAll(n)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,