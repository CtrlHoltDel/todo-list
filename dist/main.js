(()=>{"use strict";var e={982:(e,n,t)=>{t.d(n,{Z:()=>A});var r=t(15),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Rubik:wght@300&display=swap);"]),o.push([e.id,'* {\n  margin: 0px;\n  padding: 0px;\n}\n\nbody {\n  font-family: "Rubik", sans-serif;\n  font-weight: 500;\n}\n\n.header {\n  width: 100vw;\n  height: 10vh;\n  display: -ms-grid;\n  display: grid;\n  grid: ". . ." 1fr\r / 1fr 3.5fr 1fr;\n  background-color: #718355;\n  color: #e9f5db;\n  font-size: 3rem;\n}\n\n.header__title {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  height: 100%;\n}\n\n.header__projectTitle {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  height: 100%;\n  padding-right: 2.5%;\n}\n\n.header__settings {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: end;\n      -ms-flex-pack: end;\n          justify-content: flex-end;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  margin-right: 20px;\n}\n\n.header__settings svg {\n  height: 40px;\n}\n\n.header__settings:hover {\n  cursor: pointer;\n  color: black;\n}\n\n.mainContainerFlex {\n  width: 100vw;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  height: 88vh;\n}\n\n.mainContainer {\n  height: 95%;\n  display: -ms-grid;\n  display: grid;\n  grid: ". . ." 1fr\r / 1fr 3.5fr 1fr;\n}\n\n.mainContainer__projectListDiv {\n  height: 100%;\n  max-width: 350px;\n  min-width: 350px;\n  width: 22%;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n\n.mainContainer__projectListDiv__input {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  width: 80%;\n}\n\n.mainContainer__projectListDiv__input form {\n  width: 100%;\n}\n\n.mainContainer__projectListDiv__input form input {\n  margin-top: 5px;\n  font-size: 1.5rem;\n  width: 100%;\n  background-color: #718355;\n  border: none;\n  height: 30px;\n  color: #e9f5db;\n  border-radius: 5px;\n  padding: 5px 0px;\n  text-align: center;\n}\n\n.mainContainer__projectListDiv__input form input::-webkit-input-placeholder {\n  color: #e9f5db;\n}\n\n.mainContainer__projectListDiv__input form input:-ms-input-placeholder {\n  color: #e9f5db;\n}\n\n.mainContainer__projectListDiv__input form input::-ms-input-placeholder {\n  color: #e9f5db;\n}\n\n.mainContainer__projectListDiv__input form input::placeholder {\n  color: #e9f5db;\n}\n\n.mainContainer__projectListDiv__input form button {\n  position: absolute;\n  border: none;\n  background-color: rgba(0, 0, 0, 0);\n}\n\n.mainContainer__projectListDiv__projectList {\n  overflow: auto;\n  width: 80%;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainer {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  width: 100%;\n  -webkit-box-pack: justify;\n      -ms-flex-pack: justify;\n          justify-content: space-between;\n  border-radius: 5px;\n  min-height: 40px;\n  margin-top: 5px;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainer .projectName {\n  padding-left: 3%;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  width: 85%;\n  border-radius: 5px 0px 0px 5px;\n  font-size: 1.5rem;\n  background-color: #f6f2f0;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainer .projectName:hover {\n  cursor: pointer;\n  background-color: #718355;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainer .projectDeleteButton {\n  color: #f6f2f0;\n  width: 15%;\n  aspect-ratio: 1/1;\n  border-radius: 0px 5px 5px 0px;\n  background-color: #f6f2f0;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainer .projectDeleteButton:hover {\n  cursor: pointer;\n  color: #ee5a5a;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainer:hover .projectName {\n  color: #e9f5db;\n  background-color: #718355;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainer:hover .projectDeleteButton {\n  background-color: #718355;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainerStatic {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  width: 100%;\n  -webkit-box-pack: justify;\n      -ms-flex-pack: justify;\n          justify-content: space-between;\n  height: 40px;\n  margin-top: 5px;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainerStatic .projectName {\n  border-radius: 5px;\n  padding-left: 3%;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  width: 100%;\n  font-size: 1.5rem;\n  background-color: #f6f2f0;\n}\n\n.mainContainer__projectListDiv__projectList__projectContainerStatic .projectName:hover {\n  cursor: pointer;\n  color: #e9f5db;\n  background-color: #718355;\n}\n\n.mainContainer__taskListDiv {\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.mainContainer__taskListDiv__container {\n  width: 100%;\n}\n\n.mainContainer__taskListDiv__container .headerForObjects {\n  font-size: 2rem;\n  height: 2.5rem;\n  margin-left: 25px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  margin: 10px 0px 5px 25px;\n  color: #718355;\n}\n\n.mainContainer__taskListDiv__container .taskContainer {\n  margin-top: 3px;\n  width: 100%;\n  min-height: 35px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  background-color: #e9f5db;\n  color: #718355;\n  border-radius: 5px;\n  padding: 5px 0px;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .editTask {\n  display: none;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  border: none;\n  background-color: #f5faef;\n  border-radius: 5px;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskTitleEdit {\n  width: 10%;\n  margin-left: 10px;\n  min-width: 114px;\n  -webkit-box-pack: end;\n      -ms-flex-pack: end;\n          justify-content: flex-end;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskDateEdit {\n  min-width: 100px;\n  text-align: right;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskNoteEdit {\n  width: 100%;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskLineDividerDiv {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  min-width: 20px;\n  min-height: 35px;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskLineDividerDiv .taskLineDivider {\n  min-height: 100%;\n  width: 2px;\n  background-color: #8292694f;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskTitle {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  font-weight: bold;\n  width: 10%;\n  margin-left: 10px;\n  min-width: 114px;\n  -webkit-box-pack: end;\n      -ms-flex-pack: end;\n          justify-content: flex-end;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskDate {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  min-width: 100px;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskNote {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  width: 100%;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskButtons {\n  margin-right: 10px;\n  min-width: 60px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskButtons .taskDelete {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  width: 35px;\n  color: #7183551e;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskButtons .taskDelete:hover {\n  cursor: pointer;\n  color: #ee5a5a !important;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskButtons .taskEdit {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  width: 25px;\n  color: #7183551e;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskButtons .taskEdit:hover {\n  cursor: pointer;\n  color: black !important;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskButtons .taskConfirmEdit {\n  display: none;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  color: #087408;\n  width: 25px;\n}\n\n.mainContainer__taskListDiv__container .taskContainer .taskButtons .taskConfirmEdit:hover {\n  display: cursor;\n  color: #50a850;\n}\n\n.mainContainer__taskListDiv__container .taskContainer:hover {\n  cursor: pointer;\n}\n\n.mainContainer__taskListDiv__container .taskContainer:hover .taskButtons .taskDelete {\n  color: #718355;\n}\n\n.mainContainer__taskListDiv__container .taskContainer:hover .taskButtons .taskEdit {\n  color: #718355;\n}\n\n.mainContainer__taskInputDiv {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  max-width: 350px;\n  min-width: 350px;\n}\n\n.mainContainer__taskInputDiv #newTaskForm {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  width: 80%;\n  color: #718355;\n}\n\n.mainContainer__taskInputDiv #newTaskForm h2 {\n  text-align: center;\n}\n\n.mainContainer__taskInputDiv #newTaskForm input {\n  border: none;\n  background-color: #718355;\n  font-size: 1.2rem;\n  height: 2.5rem;\n  margin-bottom: 10px;\n  color: #e9f5db;\n  padding: 0px 10px;\n  border-radius: 5px;\n}\n\n.mainContainer__taskInputDiv #newTaskForm .inputTaskHeader {\n  font-weight: bold;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: justify;\n      -ms-flex-pack: justify;\n          justify-content: space-between;\n}\n\n.mainContainer__taskInputDiv #newTaskForm .inputTaskHeader .taskError {\n  display: none;\n  font-weight: 500;\n  color: red;\n}\n\n.mainContainer__taskInputDiv #newTaskForm button {\n  border: none;\n  font-size: 1.2rem;\n  margin-top: 10px;\n  border-radius: 10px;\n  border: #718355 2px solid;\n  color: #718355;\n  height: 2.5rem;\n  background-color: #e9f5db;\n}\n\n.mainContainer__taskInputDiv #newTaskForm button:hover {\n  cursor: pointer;\n}\n\n.dangerColour {\n  background-color: #ee5a5a !important;\n  font-size: 2rem;\n}\n\n.dangerColour::-webkit-input-placeholder {\n  color: black !important;\n}\n\n.dangerColour:-ms-input-placeholder {\n  color: black !important;\n}\n\n.dangerColour::-ms-input-placeholder {\n  color: black !important;\n}\n\n.dangerColour::placeholder {\n  color: black !important;\n}\n\n.currentlySelected {\n  background-color: #718355 !important;\n}\n\n.currentlySelectedFontColour {\n  color: #e9f5db !important;\n}\n\n.completedTask {\n  background-color: #b4afaf !important;\n  color: rgba(0, 0, 0, 0.507) !important;\n}\n\nfooter {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  background-color: #718355;\n  color: #e9f5db;\n  min-height: 2vh;\n  width: 100vw;\n}\n\n.confirmDeleteProjectModal {\n  position: absolute;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.274);\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  color: #e9f5db;\n  display: none;\n}\n\n.confirmDeleteProjectModal .deleteConfirmationModal {\n  border-radius: 10px;\n  background-color: #718355;\n  width: 20vw;\n  height: 200px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -ms-flex-pack: distribute;\n      justify-content: space-around;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n\n.confirmDeleteProjectModal .deleteModalParagraph {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  grid-area: deleteModalParagraph;\n  text-align: center;\n  font-size: 1.2rem;\n  width: 80%;\n}\n\n.confirmDeleteProjectModal .buttonsInModal {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: distribute;\n      justify-content: space-around;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  width: 80%;\n}\n\n.confirmDeleteProjectModal .buttonsInModal .deleteModalConfirm {\n  grid-area: deleteModalConfirm;\n  background-color: #f33636;\n}\n\n.confirmDeleteProjectModal .buttonsInModal .deleteModalConfirm:hover {\n  cursor: pointer;\n  background-color: #ee5a5a;\n}\n\n.confirmDeleteProjectModal .buttonsInModal .deleteModalDeny {\n  grid-area: deleteModalDeny;\n  background-color: #e9f5db;\n}\n\n.confirmDeleteProjectModal .buttonsInModal .deleteModalDeny:hover {\n  cursor: pointer;\n  background-color: #a3ac9a;\n}\n\n.confirmDeleteProjectModal .buttonsInModal .deleteButtonsModal {\n  border-radius: 10px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  border: none;\n  font-size: 2;\n  padding: 10px 50px;\n}\n\n.settingsDropdown {\n  position: absolute;\n  background-color: orange;\n}\n/*# sourceMappingURL=style.css.map */',"",{version:3,sources:["webpack://./src/style/style.scss","webpack://./src/style/style.css"],names:[],mappings:"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",sourceRoot:""}]);const A=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var A=0;A<e.length;A++){var s=[].concat(e[A]);r&&a[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),n.push(s))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,a=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,a,i=[],o=!0,A=!1;try{for(t=t.call(e);!(o=(r=t.next()).done)&&(i.push(r.value),!n||i.length!==n);o=!0);}catch(e){A=!0,a=e}finally{try{o||null==t.return||t.return()}finally{if(A)throw a}}return i}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],o=a[3];if(!o)return i;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),c="/*# ".concat(s," */"),l=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[i].concat(l).concat([c]).join("\n")}return[i].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},o=[],A=0;A<e.length;A++){var s=e[A],c=r.base?s[0]+r.base:s[0],l=i[c]||0,d="".concat(c," ").concat(l);i[c]=l+1;var u=t(d),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(n[u].references++,n[u].updater(f)):n.push({identifier:d,updater:a(f,r),references:1}),o.push(d)}return o}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var A=t(i[o]);n[A].references--}for(var s=r(e,a),c=0;c<i.length;c++){var l=t(i[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r=t.css,a=t.media,i=t.sourceMap;a?e.setAttribute("media",a):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),i=t(569),o=t.n(i),A=t(565),s=t.n(A),c=t(216),l=t.n(c),d=t(589),u=t.n(d),f=t(982),m={};m.styleTagTransform=u(),m.setAttributes=s(),m.insert=o().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=l(),n()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;class B{constructor(e,n,t,r){this.project=r,this.title=e,this.date=n,this.note=t,this.completed=!1,this.id=Math.random()}}function C(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function p(e){C(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function h(e){C(1,arguments);var n=p(e);return!isNaN(n)}var E={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function g(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,r=e.formats[t]||e.formats[e.defaultWidth];return r}}var b,y={date:g({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:g({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:g({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},w={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function k(e){return function(n,t){var r,a=t||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,o=a.width?String(a.width):i;r=e.formattingValues[o]||e.formattingValues[i]}else{var A=e.defaultWidth,s=a.width?String(a.width):e.defaultWidth;r=e.values[s]||e.values[A]}return r[e.argumentCallback?e.argumentCallback(n):n]}}function x(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=n.match(a);if(!i)return null;var o,A=i[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?D(s,(function(e){return e.test(A)})):v(s,(function(e){return e.test(A)}));o=e.valueCallback?e.valueCallback(c):c,o=t.valueCallback?t.valueCallback(o):o;var l=n.slice(A.length);return{value:o,rest:l}}}function v(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function D(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}const _={code:"en-US",formatDistance:function(e,n,t){var r;return t=t||{},r="string"==typeof E[e]?E[e]:1===n?E[e].one:E[e].other.replace("{{count}}",n),t.addSuffix?t.comparison>0?"in "+r:r+" ago":r},formatLong:y,formatRelative:function(e,n,t,r){return w[e]},localize:{ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:k({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:k({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:k({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:k({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:k({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(b={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(b.matchPattern);if(!t)return null;var r=t[0],a=e.match(b.parsePattern);if(!a)return null;var i=b.valueCallback?b.valueCallback(a[0]):a[0];i=n.valueCallback?n.valueCallback(i):i;var o=e.slice(r.length);return{value:i,rest:o}}),era:x({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:x({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:x({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:x({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:x({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function M(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function T(e,n){C(2,arguments);var t=p(e).getTime(),r=M(n);return new Date(t+r)}function j(e,n){C(2,arguments);var t=M(n);return T(e,-t)}function L(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}const U=function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return L("yy"===n?r%100:r,n.length)},S=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):L(t+1,2)},P=function(e,n){return L(e.getUTCDate(),n.length)},N=function(e,n){return L(e.getUTCHours()%12||12,n.length)},Y=function(e,n){return L(e.getUTCHours(),n.length)},W=function(e,n){return L(e.getUTCMinutes(),n.length)},I=function(e,n){return L(e.getUTCSeconds(),n.length)},q=function(e,n){var t=n.length,r=e.getUTCMilliseconds();return L(Math.floor(r*Math.pow(10,t-3)),n.length)};var O=864e5;function H(e){C(1,arguments);var n=1,t=p(e),r=t.getUTCDay(),a=(r<n?7:0)+r-n;return t.setUTCDate(t.getUTCDate()-a),t.setUTCHours(0,0,0,0),t}function z(e){C(1,arguments);var n=p(e),t=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var a=H(r),i=new Date(0);i.setUTCFullYear(t,0,4),i.setUTCHours(0,0,0,0);var o=H(i);return n.getTime()>=a.getTime()?t+1:n.getTime()>=o.getTime()?t:t-1}function F(e){C(1,arguments);var n=z(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var r=H(t);return r}var G=6048e5;function R(e,n){C(1,arguments);var t=n||{},r=t.locale,a=r&&r.options&&r.options.weekStartsOn,i=null==a?0:M(a),o=null==t.weekStartsOn?i:M(t.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=p(e),s=A.getUTCDay(),c=(s<o?7:0)+s-o;return A.setUTCDate(A.getUTCDate()-c),A.setUTCHours(0,0,0,0),A}function X(e,n){C(1,arguments);var t=p(e,n),r=t.getUTCFullYear(),a=n||{},i=a.locale,o=i&&i.options&&i.options.firstWeekContainsDate,A=null==o?1:M(o),s=null==a.firstWeekContainsDate?A:M(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=new Date(0);c.setUTCFullYear(r+1,0,s),c.setUTCHours(0,0,0,0);var l=R(c,n),d=new Date(0);d.setUTCFullYear(r,0,s),d.setUTCHours(0,0,0,0);var u=R(d,n);return t.getTime()>=l.getTime()?r+1:t.getTime()>=u.getTime()?r:r-1}function Z(e,n){C(1,arguments);var t=n||{},r=t.locale,a=r&&r.options&&r.options.firstWeekContainsDate,i=null==a?1:M(a),o=null==t.firstWeekContainsDate?i:M(t.firstWeekContainsDate),A=X(e,n),s=new Date(0);s.setUTCFullYear(A,0,o),s.setUTCHours(0,0,0,0);var c=R(s,n);return c}var Q=6048e5;function J(e,n){var t=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),i=r%60;if(0===i)return t+String(a);var o=n||"";return t+String(a)+o+L(i,2)}function $(e,n){return e%60==0?(e>0?"-":"+")+L(Math.abs(e)/60,2):V(e,n)}function V(e,n){var t=n||"",r=e>0?"-":"+",a=Math.abs(e);return r+L(Math.floor(a/60),2)+t+L(a%60,2)}const K={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});case"GGGG":default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),a=r>0?r:1-r;return t.ordinalNumber(a,{unit:"year"})}return U(e,n)},Y:function(e,n,t,r){var a=X(e,r),i=a>0?a:1-a;return"YY"===n?L(i%100,2):"Yo"===n?t.ordinalNumber(i,{unit:"year"}):L(i,n.length)},R:function(e,n){return L(z(e),n.length)},u:function(e,n){return L(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return L(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return L(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return S(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return L(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var a=function(e,n){C(1,arguments);var t=p(e),r=R(t,n).getTime()-Z(t,n).getTime();return Math.round(r/Q)+1}(e,r);return"wo"===n?t.ordinalNumber(a,{unit:"week"}):L(a,n.length)},I:function(e,n,t){var r=function(e){C(1,arguments);var n=p(e),t=H(n).getTime()-F(n).getTime();return Math.round(t/G)+1}(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):L(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):P(e,n)},D:function(e,n,t){var r=function(e){C(1,arguments);var n=p(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=n.getTime(),a=t-r;return Math.floor(a/O)+1}(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):L(r,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});case"EEEE":default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(i);case"ee":return L(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(a,{width:"short",context:"formatting"});case"eeee":default:return t.day(a,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var a=e.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(i);case"cc":return L(i,n.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(a,{width:"narrow",context:"standalone"});case"cccccc":return t.day(a,{width:"short",context:"standalone"});case"cccc":default:return t.day(a,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),a=0===r?7:r;switch(n){case"i":return String(a);case"ii":return L(a,n.length);case"io":return t.ordinalNumber(a,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});case"iiii":default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return N(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):Y(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):L(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):L(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):W(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):I(e,n)},S:function(e,n){return q(e,n)},X:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(n){case"X":return $(a);case"XXXX":case"XX":return V(a);case"XXXXX":case"XXX":default:return V(a,":")}},x:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return $(a);case"xxxx":case"xx":return V(a);case"xxxxx":case"xxx":default:return V(a,":")}},O:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+J(a,":");case"OOOO":default:return"GMT"+V(a,":")}},z:function(e,n,t,r){var a=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+J(a,":");case"zzzz":default:return"GMT"+V(a,":")}},t:function(e,n,t,r){var a=r._originalDate||e;return L(Math.floor(a.getTime()/1e3),n.length)},T:function(e,n,t,r){return L((r._originalDate||e).getTime(),n.length)}};function ee(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});case"PPPP":default:return n.date({width:"full"})}}function ne(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});case"pppp":default:return n.time({width:"full"})}}const te={p:ne,P:function(e,n){var t,r=e.match(/(P+)(p+)?/),a=r[1],i=r[2];if(!i)return ee(e,n);switch(a){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;case"PPPP":default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",ee(a,n)).replace("{{time}}",ne(i,n))}};function re(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var ae=["D","DD"],ie=["YY","YYYY"];function oe(e){return-1!==ae.indexOf(e)}function Ae(e){return-1!==ie.indexOf(e)}function se(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var ce=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,le=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,de=/^'([^]*?)'?$/,ue=/''/g,fe=/[a-zA-Z]/;function me(e,n,t){C(2,arguments);var r=String(n),a=t||{},i=a.locale||_,o=i.options&&i.options.firstWeekContainsDate,A=null==o?1:M(o),s=null==a.firstWeekContainsDate?A:M(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var c=i.options&&i.options.weekStartsOn,l=null==c?0:M(c),d=null==a.weekStartsOn?l:M(a.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!i.localize)throw new RangeError("locale must contain localize property");if(!i.formatLong)throw new RangeError("locale must contain formatLong property");var u=p(e);if(!h(u))throw new RangeError("Invalid time value");var f=re(u),m=j(u,f),B={firstWeekContainsDate:s,weekStartsOn:d,locale:i,_originalDate:u},E=r.match(le).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,te[n])(e,i.formatLong,B):e})).join("").match(ce).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return Be(t);var o=K[r];if(o)return!a.useAdditionalWeekYearTokens&&Ae(t)&&se(t,n,e),!a.useAdditionalDayOfYearTokens&&oe(t)&&se(t,n,e),o(m,t,i.localize,B);if(r.match(fe))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("");return E}function Be(e){return e.match(de)[1].replace(ue,"'")}const Ce=document.querySelector(".mainContainer__projectListDiv__projectList"),pe=document.querySelector(".mainContainer__taskListDiv__container"),he=document.querySelector(".confirmDeleteProjectModal"),Ee=function(){const e=function(e){const n=document.createElement("div"),t=document.createElement("div");n.setAttribute("id",e),n.classList.add("mainContainer__projectListDiv__projectList__projectContainer"),t.classList.add("projectName"),e=e.charAt(0).toUpperCase()+e.slice(1),t.innerHTML=e,n.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 projectDeleteButton"viewBox="0 0 20 20" fill="currentColor"> <path fill-rule="evenodd" d="M6.707 4.879A3 3 0 018.828 4H15a3 3 0 013 3v6a3 3 0 01-3 3H8.828a3 3 0 01-2.12-.879l-4.415-4.414a1 1 0 010-1.414l4.414-4.414zm4 2.414a1 1 0 00-1.414 1.414L10.586 10l-1.293 1.293a1 1 0 101.414 1.414L12 11.414l1.293 1.293a1 1 0 001.414-1.414L13.414 10l1.293-1.293a1 1 0 00-1.414-1.414L12 8.586l-1.293-1.293z" clip-rule="evenodd" /> </svg>',Ce.appendChild(n),n.prepend(t)};return{renderAll:function(n){n.forEach((n=>e(n)))},renderSingle:e}}(),ge=function(){const e=function(e){const n=function(e,n){const t=document.createElement("div");return t.classList.add(e),null!=n&&(t.innerHTML=n),t},t=function(){const e=n("taskLineDividerDiv"),t=n("taskLineDivider");return e.appendChild(t),e},r=e.date.split("-"),a=`${r[2]}/${r[1]}/${r[0]}`,i=me(new Date,"yyyy-MM-dd").split("-"),o=n("taskContainer"),A=n("taskTitle",e.title),s=n("taskDate",a),c=n("taskNote",e.note),l=n("taskButtons"),d=n("taskEdit"),u=n("taskDelete"),f=n("taskConfirmEdit"),m=document.createElement("input"),B=document.createElement("input"),C=document.createElement("input");m.classList.add("editTask","taskTitleEdit"),B.classList.add("editTask","taskDateEdit"),C.classList.add("editTask","taskNoteEdit"),m.setAttribute("id",`titleEdit-${e.id}`),B.setAttribute("id",`dateEdit-${e.id}`),C.setAttribute("id",`noteEdit-${e.id}`),m.value=e.title,C.value=e.note,B.setAttribute("type","date"),B.setAttribute("value",`${r[0]}-${r[1]}-${r[2]}`),B.setAttribute("min",`${i[0]}-${i[1]}-${i[2]}`),d.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 taskEditButton" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path class="taskEditButton" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" /></svg>',u.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 taskDeleteButton"viewBox="0 0 20 20" fill="currentColor"> <path class="taskDeleteButton" fill-rule="evenodd" d="M6.707 4.879A3 3 0 018.828 4H15a3 3 0 013 3v6a3 3 0 01-3 3H8.828a3 3 0 01-2.12-.879l-4.415-4.414a1 1 0 010-1.414l4.414-4.414zm4 2.414a1 1 0 00-1.414 1.414L10.586 10l-1.293 1.293a1 1 0 101.414 1.414L12 11.414l1.293 1.293a1 1 0 001.414-1.414L13.414 10l1.293-1.293a1 1 0 00-1.414-1.414L12 8.586l-1.293-1.293z" clip-rule="evenodd" /> </svg>',f.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 taskEditConfirmButton" viewBox="0 0 20 20" fill="currentColor"><path class="taskEditConfirmButton" fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" /></svg>',e.completed&&o.classList.add("completedTask");const p=[A,m,t(),s,B,t(),c,C,t(),l];pe.appendChild(o),p.forEach((e=>o.appendChild(e))),p.forEach((n=>{n.classList.contains("taskButtons")||n.parentNode.setAttribute("id",e.id)})),l.appendChild(f),l.appendChild(d),l.appendChild(u)},n=function(n){n.forEach((n=>e(n)))},t=function(){pe.innerHTML=""};return{renderSingle:e,renderArray:n,clearTasks:t,clearAndRenderTasks:function(e){t(),n(e)},changeStatus:function(e){e.classList.contains("completedTask")?e.classList.remove("completedTask"):e.classList.add("completedTask")},clearAndRenderWithHeaders:function(n){t();const r=[];n.forEach((e=>r.push(e.project))),[...new Set(r)].forEach((t=>{const r=n.filter((e=>e.project===t));"all"===t&&(t="unallocated tasks");const a=document.createElement("div");a.innerHTML=t.charAt(0).toUpperCase()+t.slice(1),a.classList.add("headerForObjects"),pe.appendChild(a),r.forEach((n=>e(n)))}))},taskEdit:function(e){const n=e.children,t=[n[1],n[4],n[7]],r=[n[0],n[3],n[6]];n[9].children[0].style.display="flex",n[9].children[1].style.display="none",t.forEach((e=>e.style.display="block")),r.forEach((e=>e.style.display="none"))},taskEditConfirm:function(e){const n=e.children,t=[n[1],n[4],n[7]],r=[n[0],n[3],n[6]];n[9].children[0].style.display="none",n[9].children[1].style.display="flex",t.forEach((e=>e.style.display="none")),r.forEach((e=>e.style.display="flex"))},taskEditValues:function(e,n){e.children[0].innerHTML=n[0];const t=n[1].split("-");e.children[3].innerHTML=`${t[2]}/${t[1]}/${t[0]}`,e.children[6].innerHTML=n[2]}}}(),be=function(){const e=function(){const e=Ce.children.length;for(let n=0;n<e;n++)Ce.children[n].children[0].classList.remove("currentlySelected"),Ce.children[n].children[0].classList.remove("currentlySelectedFontColour"),null!=Ce.children[n].children[1]&&(Ce.children[n].children[1].classList.remove("currentlySelected"),Ce.children[n].children[1].classList.remove("currentlySelectedFontColour"))};return{addCurrentlySelected:function(n){const t=n.parentNode.children.length;e(),n.parentNode.children[0].classList.add("currentlySelectedFontColour");for(let e=0;e<t;e++)n.parentNode.children[e].classList.add("currentlySelected")},removeCurrentlySelected:e,resetCurrentlySelected:function(){document.getElementById("reset_Style").classList.add("currentlySelected","currentlySelectedFontColour")},removeDeleteConfirmModal:function(){he.style.display="none"}}}(),ye=function(){const e=document.querySelector(".header__projectTitle"),n=document.getElementById("dateInput");return{changeTitle:function(n){e.innerHTML=n.charAt(0).toUpperCase()+n.slice(1)},setDateInputParameters:function(){const e=me(new Date,"yyyy-MM-dd").split("-");n.setAttribute("min",`${e[0]}-${e[1]}-${e[2]}`),n.setAttribute("value",`${e[0]}-${e[1]}-${e[2]}`)},currentDate:function(){return me(new Date,"yyyy-MM-dd")}}}();function we(e,n){C(2,arguments);var t=p(e),r=p(n);return t.getTime()<r.getTime()}const ke=function(){const e=document.getElementById("submitProjectButton"),n=document.querySelector(".mainContainer__projectListDiv__projectList"),t=document.querySelector(".mainContainer__taskListDiv__container"),r=document.getElementById("taskSubmit"),a=document.querySelector(".confirmDeleteProjectModal");return{newProject:function(n){e.addEventListener("click",(function(e){e.preventDefault(),n()}))},chooseProject:function(e){n.addEventListener("click",(function(n){n.target.classList.contains("projectName")&&e(n)}))},deleteProject:function(e){n.addEventListener("click",(function(n){(n.target.classList.contains("projectDeleteButton")||n.target.parentNode.classList.contains("projectDeleteButton"))&&e(n)}))},newTask:function(e){r.addEventListener("click",(function(n){n.preventDefault(),e()}))},taskEditDelete:function(e){t.addEventListener("click",(function(n){e(n)}))},confirmDelete:function(e){a.style.display="flex",a.addEventListener("click",(function(n){e(n)}))}}}(),xe=function(){const e=document.getElementById("projectInput"),n=function(e,n,t){const r=me(new Date,"yyyy-MM-dd").split("-"),a=n.value.split("-"),i=we(new Date(a[0],a[1],a[2]),new Date(r[0],r[1],r[2]));let o=0;return""===e.value&&(console.log("fix title"),o++),""===t.value&&(console.log("fix note"),o++),i&&(console.log("The date is before"),o++),o>0?null:[e.value,n.value,t.value]};return{projectName:function(){const n=e.value.toLowerCase();return e.value="",n},form:function(){const e=document.getElementById("titleInput"),t=document.getElementById("dateInput"),r=document.getElementById("noteInput"),a=me(new Date,"yyyy-MM-dd").split("-"),i=n(e,t,r);return e.value="",t.value=`${a[0]}-${a[1]}-${a[2]}`,r.value="",i},taskEdit:function(e){const t=e.id,r=document.getElementById(`titleEdit-${t}`),a=document.getElementById(`dateEdit-${t}`),i=document.getElementById(`noteEdit-${t}`);return n(r,a,i)}}}(),ve=function(){let e="LOCAL_STORAGE_CURRENT_TASKS",n="LOCAL_STORAGE_CURRENT_PROJECTS",t="LOCAL_STORAGE_CURRENTLY_SELEC_PROJECT";return{saveProjects:function(e){const t=JSON.stringify(e);localStorage.setItem(n,t)},saveTasks:function(n){const t=JSON.stringify(n);localStorage.setItem(e,t)},saveStarredProject:function(e){const n=JSON.stringify(e);localStorage.setItem(t,n)},loadProjects:function(){return JSON.parse(localStorage.getItem(n))},loadTasks:function(){return JSON.parse(localStorage.getItem(e))},loadStarredProject:function(){return JSON.parse(localStorage.getItem(t))}}}();function De(e,n){C(2,arguments);var t=p(e),r=M(n);return isNaN(r)?new Date(NaN):r?(t.setDate(t.getDate()+r),t):t}function _e(e,n){C(2,arguments);var t=p(e),r=M(n);if(isNaN(r))return new Date(NaN);if(!r)return t;var a=t.getDate(),i=new Date(t.getTime());i.setMonth(t.getMonth()+r+1,0);var o=i.getDate();return a>=o?i:(t.setFullYear(i.getFullYear(),i.getMonth(),a),t)}const Me=function(){const e=me(new Date,"yyyy-MM-dd");return{byProject:function(e,n){return e.filter((e=>e.project===n))},byPreset:function(n,t){if("today"===t)return n.filter((n=>n.date===e));if("this week"===t){const e=me(function(e,n){if(C(2,arguments),!n||"object"!=typeof n)return new Date(NaN);var t=n.years?M(n.years):0,r=n.months?M(n.months):0,a=n.weeks?M(n.weeks):0,i=n.days?M(n.days):0,o=n.hours?M(n.hours):0,A=n.minutes?M(n.minutes):0,s=n.seconds?M(n.seconds):0,c=p(e),l=r||t?_e(c,r+12*t):c,d=i||a?De(l,i+7*a):l,u=1e3*(s+60*(A+60*o));return new Date(d.getTime()+u)}(new Date,{days:7}),"yyyy-MM-dd").split("-");return n.filter((n=>{const t=n.date.split("-");return we(new Date(t[0],t[1],t[2]),new Date(e[0],e[1],e[2]))}))}}}}();!function(){let e=[{project:"example project",title:"Example Task",date:ye.currentDate(),note:"This is an example task.",completed:!1,id:1}],n=["example project"],t="all";const r=n=>{const t=e.map((e=>e.id==n)).indexOf(!0);e.splice(t,1)},a=n=>{if("this week"!==n&&"today"!==n)if("all"!==n){const n=Me.byProject(e,t);ge.clearAndRenderTasks(n)}else ge.clearAndRenderWithHeaders(e);else{const n=Me.byPreset(e,t);ge.clearAndRenderWithHeaders(n)}};ke.newProject((()=>{const e=xe.projectName().toLowerCase();"all"!==e&&"this week"!==e&&"today"!==e?-1==n.indexOf(e)?""!==e?(Ee.renderSingle(e),n.push(e),ve.saveProjects(n)):console.log("Needs an input"):console.log("Can't use the same name"):console.log("Can't use one of the filter names")})),ke.chooseProject((e=>{const n=e.target.parentNode.id;t=n.toLowerCase(),ye.changeTitle(t),be.addCurrentlySelected(e.target),a(t)})),ke.deleteProject((i=>{const o=function(e,i,o){e.remove(),n.splice(n.indexOf(i),1),o.forEach((e=>{r(e.id)})),s===t&&(t="all",ye.changeTitle(t),be.resetCurrentlySelected()),a(t),ve.saveProjects(n)},A=i.target.closest(".mainContainer__projectListDiv__projectList__projectContainer"),s=A.id,c=e.filter((e=>{if(e.project===s)return e.id}));0!==c.length?ke.confirmDelete((function(e){e.target.classList.contains("deleteModalConfirm")?(o(A,s,c),be.removeDeleteConfirmModal()):(e.target.classList.contains("deleteModalDeny")||e.target.classList.contains("confirmDeleteProjectModal"))&&be.removeDeleteConfirmModal()})):o(A,s,c)})),ke.newTask((()=>{const n=xe.form();if(null===n)return;const r=new B(n[0],n[1],n[2],t);"today"!==t&&"this week"!==t||(r.project="all"),e.push(r),a(t),ve.saveTasks(e)})),ke.taskEditDelete((n=>{let i=n.target.closest(".taskContainer");if(null!==i&&!n.target.classList.contains("editTask"))if(n.target.classList.contains("taskDeleteButton"))r(i.id),a(t),ve.saveTasks(e);else if(n.target.classList.contains("taskEditButton"))ge.taskEdit(i);else if(n.target.classList.contains("taskEditConfirmButton")){const n=xe.taskEdit(i);if(null===n)return void console.log("input error");ge.taskEditValues(i,n),ge.taskEditConfirm(i),((n,t)=>{const r=e.map((e=>e.id==n)).indexOf(!0);e[r].title=t[0],e[r].date=t[1],e[r].note=t[2]})(i.id,n),ve.saveTasks(e),a(t)}else(n=>{ge.changeStatus(n);const t=e.map((e=>e.id==n.id)).indexOf(!0);e[t].completed?e[t].completed=!1:e[t].completed=!0})(i),ve.saveTasks(e)})),null!=ve.loadProjects()&&(n=ve.loadProjects()),null!=ve.loadTasks()&&(e=ve.loadTasks()),ye.setDateInputParameters(),a(t),Ee.renderAll(n)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGUvc3R5bGUuY3NzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlL3N0eWxlLmNzcz9jOWYwIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL2NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVmFsaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL0RPTS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzQmVmb3JlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL2lucHV0cy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9zdG9yYWdlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkRGF5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZE1vbnRocy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9maWx0ZXJzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL1VJLmpzIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsImNhbGwiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJzcGxpY2UiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsIlRhc2siLCJ0aXRsZSIsImRhdGUiLCJub3RlIiwicHJvamVjdCIsImNvbXBsZXRlZCIsIk1hdGgiLCJyYW5kb20iLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ3VtZW50cyIsImFyZ1N0ciIsIkRhdGUiLCJnZXRUaW1lIiwiY29uc29sZSIsIndhcm4iLCJzdGFjayIsIk5hTiIsImlzVmFsaWQiLCJkaXJ0eURhdGUiLCJpc05hTiIsImZvcm1hdERpc3RhbmNlTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhXZWVrcyIsInhXZWVrcyIsImFib3V0WE1vbnRocyIsInhNb250aHMiLCJhYm91dFhZZWFycyIsInhZZWFycyIsIm92ZXJYWWVhcnMiLCJhbG1vc3RYWWVhcnMiLCJidWlsZEZvcm1hdExvbmdGbiIsIndpZHRoIiwiU3RyaW5nIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0IiwiZm9ybWF0cyIsImZvcm1hdExvbmciLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwidGltZSIsImRhdGVUaW1lIiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsImRpcnR5SW5kZXgiLCJkaXJ0eU9wdGlvbnMiLCJ2YWx1ZXNBcnJheSIsImNvbnRleHQiLCJmb3JtYXR0aW5nVmFsdWVzIiwiZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCIsIl9kZWZhdWx0V2lkdGgiLCJfd2lkdGgiLCJ2YWx1ZXMiLCJhcmd1bWVudENhbGxiYWNrIiwiYnVpbGRNYXRjaEZuIiwic3RyaW5nIiwibWF0Y2hQYXR0ZXJuIiwibWF0Y2hQYXR0ZXJucyIsImRlZmF1bHRNYXRjaFdpZHRoIiwibWF0Y2hSZXN1bHQiLCJtYXRjaCIsIm1hdGNoZWRTdHJpbmciLCJwYXJzZVBhdHRlcm5zIiwiZGVmYXVsdFBhcnNlV2lkdGgiLCJmaW5kSW5kZXgiLCJwYXR0ZXJuIiwiZmluZEtleSIsInZhbHVlQ2FsbGJhY2siLCJyZXN0Iiwib2JqZWN0IiwicHJlZGljYXRlIiwiYXJyYXkiLCJjb2RlIiwiZm9ybWF0RGlzdGFuY2UiLCJ0b2tlbiIsInJlcGxhY2UiLCJhZGRTdWZmaXgiLCJjb21wYXJpc29uIiwiZm9ybWF0UmVsYXRpdmUiLCJfZGF0ZSIsIl9iYXNlRGF0ZSIsIl9vcHRpb25zIiwibG9jYWxpemUiLCJvcmRpbmFsTnVtYmVyIiwiZGlydHlOdW1iZXIiLCJfZGlydHlPcHRpb25zIiwibnVtYmVyIiwiTnVtYmVyIiwicmVtMTAwIiwiZXJhIiwibmFycm93IiwiYWJicmV2aWF0ZWQiLCJ3aWRlIiwicXVhcnRlciIsIm1vbnRoIiwiZGF5IiwiZGF5UGVyaW9kIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZUludCIsInBhcnNlUmVzdWx0IiwiYW55Iiwid2Vla1N0YXJ0c09uIiwiZmlyc3RXZWVrQ29udGFpbnNEYXRlIiwidG9JbnRlZ2VyIiwiY2VpbCIsImZsb29yIiwiYWRkTWlsbGlzZWNvbmRzIiwiZGlydHlBbW91bnQiLCJ0aW1lc3RhbXAiLCJhbW91bnQiLCJzdWJNaWxsaXNlY29uZHMiLCJhZGRMZWFkaW5nWmVyb3MiLCJ0YXJnZXRMZW5ndGgiLCJzaWduIiwib3V0cHV0IiwiYWJzIiwic2lnbmVkWWVhciIsImdldFVUQ0Z1bGxZZWFyIiwieWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInBvdyIsIk1JTExJU0VDT05EU19JTl9EQVkiLCJzdGFydE9mVVRDSVNPV2VlayIsImdldFVUQ0RheSIsImRpZmYiLCJzZXRVVENEYXRlIiwic2V0VVRDSG91cnMiLCJnZXRVVENJU09XZWVrWWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzZXRVVENGdWxsWWVhciIsInN0YXJ0T2ZOZXh0WWVhciIsImZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIiLCJzdGFydE9mVGhpc1llYXIiLCJzdGFydE9mVVRDSVNPV2Vla1llYXIiLCJmb3VydGhPZkphbnVhcnkiLCJNSUxMSVNFQ09ORFNfSU5fV0VFSyIsInN0YXJ0T2ZVVENXZWVrIiwibG9jYWxlIiwibG9jYWxlV2Vla1N0YXJ0c09uIiwiZGVmYXVsdFdlZWtTdGFydHNPbiIsIlJhbmdlRXJyb3IiLCJnZXRVVENXZWVrWWVhciIsImxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENXZWVrWWVhciIsImZpcnN0V2VlayIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJvZmZzZXQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsImhvdXJzIiwibWludXRlcyIsImRlbGltaXRlciIsImZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyIsImZvcm1hdFRpbWV6b25lIiwiRyIsInkiLCJ1bml0IiwibGlnaHRGb3JtYXR0ZXJzIiwiWSIsInNpZ25lZFdlZWtZZWFyIiwid2Vla1llYXIiLCJSIiwidSIsIlEiLCJxIiwiTSIsIkwiLCJ3Iiwid2VlayIsInJvdW5kIiwiZ2V0VVRDV2VlayIsIkkiLCJpc29XZWVrIiwiZ2V0VVRDSVNPV2VlayIsIkQiLCJkYXlPZlllYXIiLCJzZXRVVENNb250aCIsInN0YXJ0T2ZZZWFyVGltZXN0YW1wIiwiZGlmZmVyZW5jZSIsImdldFVUQ0RheU9mWWVhciIsIkUiLCJkYXlPZldlZWsiLCJsb2NhbERheU9mV2VlayIsImMiLCJpc29EYXlPZldlZWsiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJ0b0xvd2VyQ2FzZSIsImIiLCJCIiwiaCIsIkgiLCJLIiwiayIsIm0iLCJzIiwiUyIsIlgiLCJfbG9jYWxpemUiLCJ0aW1lem9uZU9mZnNldCIsIl9vcmlnaW5hbERhdGUiLCJnZXRUaW1lem9uZU9mZnNldCIsIngiLCJPIiwieiIsInQiLCJvcmlnaW5hbERhdGUiLCJUIiwiZGF0ZUxvbmdGb3JtYXR0ZXIiLCJ0aW1lTG9uZ0Zvcm1hdHRlciIsInAiLCJQIiwiZGF0ZVRpbWVGb3JtYXQiLCJkYXRlUGF0dGVybiIsInRpbWVQYXR0ZXJuIiwiZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyIsInV0Y0RhdGUiLCJVVEMiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMiLCJwcm90ZWN0ZWRXZWVrWWVhclRva2VucyIsImlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4iLCJpbmRleE9mIiwiaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuIiwidGhyb3dQcm90ZWN0ZWRFcnJvciIsImlucHV0IiwiZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwiZXNjYXBlZFN0cmluZ1JlZ0V4cCIsImRvdWJsZVF1b3RlUmVnRXhwIiwidW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAiLCJkaXJ0eUZvcm1hdFN0ciIsImZvcm1hdFN0ciIsImZvcm1hdHRlck9wdGlvbnMiLCJzdWJzdHJpbmciLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJjbGVhbkVzY2FwZWRTdHJpbmciLCJmb3JtYXR0ZXIiLCJ1c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMiLCJ1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zIiwicHJvamVjdHNDb250YWluZXJEaXYiLCJ0YXNrc0NvbnRhaW5lckRpdiIsInByb2plY3REZWxldGVNb2RhbCIsIlByb2plY3RzRE9NIiwicmVuZGVyU2luZ2xlIiwicHJvamVjdE5hbWUiLCJtYWluQ29udGFpbmVyRGl2IiwicHJvamVjdE5hbWVEaXYiLCJjbGFzc0xpc3QiLCJhZGQiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsImlubmVySFRNTCIsInByZXBlbmQiLCJyZW5kZXJBbGwiLCJwcm9qZWN0QXJyYXkiLCJmb3JFYWNoIiwiVGFza3NET00iLCJ0YXNrIiwiY2xhc3NOYW1lIiwiZWxlbWVudCIsInRhc2tMaW5lRGl2aWRlckNyZWF0b3IiLCJ0YXNrTGluZURpdmlkZXJEaXYiLCJ0YXNrTGluZURpdmlkZXIiLCJwcmludGVkRGF0ZSIsInNwbGl0IiwiZm9ybWF0dGVkRGF0ZSIsImN1cnJlbnREYXRlIiwidGFza0NvbnRhaW5lciIsInRhc2tUaXRsZSIsInRhc2tEYXRlIiwidGFza05vdGUiLCJ0YXNrQnV0dG9ucyIsInRhc2tFZGl0IiwidGFza0RlbGV0ZSIsInRhc2tDb25maXJtRWRpdCIsInRhc2tUaXRsZUVkaXQiLCJ0YXNrRGF0ZUVkaXQiLCJ0YXNrTm90ZUVkaXQiLCJhcHBlbmRBcnJheSIsImRpdiIsImNvbnRhaW5zIiwicmVuZGVyQXJyYXkiLCJjbGVhclRhc2tzIiwiY2xlYXJBbmRSZW5kZXJUYXNrcyIsImNoYW5nZVN0YXR1cyIsIm5vZGUiLCJjbGVhckFuZFJlbmRlcldpdGhIZWFkZXJzIiwicHJvamVjdHNXaXRoVGFza3MiLCJTZXQiLCJmaWx0ZXJlZEFycmF5IiwiZmlsdGVyIiwiaGVhZGVyIiwiY2hpbGROb2RlcyIsImNoaWxkcmVuIiwiYXJyYXlFZGl0cyIsInN0YXRpY1Rhc2tJbmZvIiwiZGlzcGxheSIsImVkaXRJbnB1dCIsInN0YXRpY05vZGUiLCJ0YXNrRWRpdENvbmZpcm0iLCJ0YXNrRWRpdFZhbHVlcyIsInNwbGl0RGF0ZSIsIlN0eWxlRE9NIiwicmVtb3ZlQ3VycmVudGx5U2VsZWN0ZWQiLCJwcm9qZWN0c0xlbmd0aCIsImFkZEN1cnJlbnRseVNlbGVjdGVkIiwibm9kZUxlbmd0aCIsInJlc2V0Q3VycmVudGx5U2VsZWN0ZWQiLCJnZXRFbGVtZW50QnlJZCIsInJlbW92ZURlbGV0ZUNvbmZpcm1Nb2RhbCIsIndob2xlQXBwIiwicGFnZVRpdGxlIiwiZGF0ZUlucHV0IiwiY2hhbmdlVGl0bGUiLCJzZXREYXRlSW5wdXRQYXJhbWV0ZXJzIiwiaXNCZWZvcmUiLCJkaXJ0eURhdGVUb0NvbXBhcmUiLCJkYXRlVG9Db21wYXJlIiwiSW5wdXQiLCJzdWJtaXRQcm9qZWN0QnV0dG9uIiwiYWxsUHJvamVjdHNDb250YWluZXIiLCJhbGxUYXNrc0NvbnRhaW5lciIsInN1Ym1pdFRhc2tCdXR0b24iLCJuZXdQcm9qZWN0IiwicGFzc3Rocm91Z2giLCJhZGRFdmVudExpc3RlbmVyIiwicHJldmVudERlZmF1bHQiLCJjaG9vc2VQcm9qZWN0IiwiZGVsZXRlUHJvamVjdCIsIm5ld1Rhc2siLCJ0YXNrRWRpdERlbGV0ZSIsImNvbmZpcm1EZWxldGUiLCJHZXRJbnB1dCIsInByb2plY3RGb3JtIiwiZm9ybUNoZWNrIiwidG9kYXlzRGF0ZSIsImlucHV0dGVkRGF0ZSIsImJlZm9yZUNoZWNrIiwibWlzc2VkSW5wdXRzIiwibG9nIiwidmFsdWVUb1JldHVybiIsImZvcm0iLCJjbGlja2VkSUQiLCJTdG9yYWdlIiwidGFza0FycmF5S2V5IiwicHJvamVjdEFycmF5S2V5IiwicHJvamVjdEN1cnJlbnRLZXkiLCJzYXZlUHJvamVjdHMiLCJzdHJpbmdpZmllZEpzb24iLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwic2F2ZVRhc2tzIiwidGFza0FycmF5Iiwic2F2ZVN0YXJyZWRQcm9qZWN0IiwibG9hZFByb2plY3RzIiwicGFyc2UiLCJnZXRJdGVtIiwibG9hZFRhc2tzIiwibG9hZFN0YXJyZWRQcm9qZWN0IiwiYWRkRGF5cyIsInNldERhdGUiLCJhZGRNb250aHMiLCJkYXlPZk1vbnRoIiwiZW5kT2ZEZXNpcmVkTW9udGgiLCJzZXRNb250aCIsImRheXNJbk1vbnRoIiwic2V0RnVsbFllYXIiLCJjdXJyZW50RGF0ZUFycmF5IiwiYnlQcm9qZWN0IiwiYnlQcmVzZXQiLCJlbmRPZldlZWtEYXRlIiwiZHVyYXRpb24iLCJ5ZWFycyIsIm1vbnRocyIsIndlZWtzIiwiZGF5cyIsInNlY29uZHMiLCJkYXRlV2l0aE1vbnRocyIsImRhdGVXaXRoRGF5cyIsIm1zVG9BZGQiLCJ0YXNrRGF0ZUFycmF5IiwiYWxsVGFza3NBcnJheSIsImFsbFByb2plY3RzQXJyYXkiLCJjdXJyZW50bHlTZWxlY3RlZFByb2plY3QiLCJyZW1vdmVUYXNrRnJvbUFycmF5IiwidGFza0lEIiwiaW5kZXhPZlRhc2siLCJjbGVhckFuZFJlbmRlciIsImN1cnJlbnRUYXNrIiwiZmlsdGVyZWRMaXN0IiwicHJvamVjdElucHV0IiwiY2xpY2tlZFByb2plY3ROYW1lIiwiY29uZmlybWVkUmVtb3ZlIiwidGFza3MiLCJwcm9qZWN0SUQiLCJjbGlja2VkTm9kZSIsImNsb3Nlc3QiLCJ0YXNrc0FycmF5SURzIiwidGFza0lucHV0RGF0YSIsImlucHV0cyIsImVkaXRUYXNrIiwiY2hhbmdlUmVhZFN0YXR1cyJdLCJtYXBwaW5ncyI6InVGQUdJQSxFLE1BQTBCLEdBQTRCLEtBQzFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLHVGQUV6Q0gsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSxpamZBQXdqZixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxtQ0FBbUMsbUNBQW1DLE1BQVEsR0FBRyxTQUFXLDQ1TEFBNDVMLFdBQWEsTUFFam9yQixXLFFDQUFELEVBQU9FLFFBQVUsU0FBVUMsR0FDekIsSUFBSUMsRUFBTyxHQXVEWCxPQXJEQUEsRUFBS0MsU0FBVyxXQUNkLE9BQU9DLEtBQUtDLEtBQUksU0FBVUMsR0FDeEIsSUFBSUMsRUFBVU4sRUFBdUJLLEdBRXJDLE9BQUlBLEVBQUssR0FDQSxVQUFVRSxPQUFPRixFQUFLLEdBQUksTUFBTUUsT0FBT0QsRUFBUyxLQUdsREEsS0FDTkUsS0FBSyxLQUtWUCxFQUFLUSxFQUFJLFNBQVVDLEVBQVNDLEVBQVlDLEdBQ2YsaUJBQVpGLElBRVRBLEVBQVUsQ0FBQyxDQUFDLEtBQU1BLEVBQVMsTUFHN0IsSUFBSUcsRUFBeUIsR0FFN0IsR0FBSUQsRUFDRixJQUFLLElBQUlILEVBQUksRUFBR0EsRUFBSU4sS0FBS1csT0FBUUwsSUFBSyxDQUVwQyxJQUFJWCxFQUFLSyxLQUFLTSxHQUFHLEdBRVAsTUFBTlgsSUFDRmUsRUFBdUJmLElBQU0sR0FLbkMsSUFBSyxJQUFJaUIsRUFBSyxFQUFHQSxFQUFLTCxFQUFRSSxPQUFRQyxJQUFNLENBQzFDLElBQUlWLEVBQU8sR0FBR0UsT0FBT0csRUFBUUssSUFFekJILEdBQVVDLEVBQXVCUixFQUFLLE1BS3RDTSxJQUNHTixFQUFLLEdBR1JBLEVBQUssR0FBSyxHQUFHRSxPQUFPSSxFQUFZLFNBQVNKLE9BQU9GLEVBQUssSUFGckRBLEVBQUssR0FBS00sR0FNZFYsRUFB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SyxFQUFjTCxFQUFjaGpCLEtBQUlvYixHQUFRQSxFQUFLMWIsSUFBTTBqQixJQUFRckssU0FBUSxHQUV6RWlLLEVBQWNLLEdBQWE3YSxNQUFRMFEsRUFBTSxHQUN6QzhKLEVBQWNLLEdBQWE1YSxLQUFPeVEsRUFBTSxHQUN4QzhKLEVBQWNLLEdBQWEzYSxLQUFPd1EsRUFBTSxJQTBJcENpTCxDQUFTTCxFQUFZcGtCLEdBQUl3a0IsR0FDekJ4RCxHQUFRUSxVQUFVOEIsR0FDbEJNLEVBQWVKLE9BakxFLENBQUNsRyxJQUV0QjdCLEdBQVM0QixhQUFhQyxHQUV0QixNQUFNcUcsRUFBY0wsRUFBY2hqQixLQUFJb2IsR0FBUUEsRUFBSzFiLElBQU1zZCxFQUFLdGQsS0FBSXFaLFNBQVEsR0FFdkVpSyxFQUFjSyxHQUFhemEsVUFDMUJvYSxFQUFjSyxHQUFhemEsV0FBWSxFQUV2Q29hLEVBQWNLLEdBQWF6YSxXQUFZLEdBMkt2Q3diLENBQWlCTixHQUNqQnBELEdBQVFRLFVBQVU4QixNQU9HLE1BQTFCdEMsR0FBUVcsaUJBQ1A0QixFQUFtQnZDLEdBQVFXLGdCQUdMLE1BQXZCWCxHQUFRYyxjQUNQd0IsRUFBZ0J0QyxHQUFRYyxhQUc1Qi9DLEdBQVNJLHlCQUNUeUUsRUFBZUosR0FDZjdJLEdBQVlXLFVBQVVpSSxHQW5OZixJIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVJ1YmlrOndnaHRAMzAwJmRpc3BsYXk9c3dhcCk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcbiAgbWFyZ2luOiAwcHg7XFxuICBwYWRkaW5nOiAwcHg7XFxufVxcblxcbmJvZHkge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJSdWJpa1xcXCIsIHNhbnMtc2VyaWY7XFxuICBmb250LXdlaWdodDogNTAwO1xcbn1cXG5cXG4uaGVhZGVyIHtcXG4gIHdpZHRoOiAxMDB2dztcXG4gIGhlaWdodDogMTB2aDtcXG4gIGRpc3BsYXk6IC1tcy1ncmlkO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQ6IFxcXCIuIC4gLlxcXCIgMWZyXFxyIC8gMWZyIDMuNWZyIDFmcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM3MTgzNTU7XFxuICBjb2xvcjogI2U5ZjVkYjtcXG4gIGZvbnQtc2l6ZTogM3JlbTtcXG59XFxuXFxuLmhlYWRlcl9fdGl0bGUge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLmhlYWRlcl9fcHJvamVjdFRpdGxlIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBwYWRkaW5nLXJpZ2h0OiAyLjUlO1xcbn1cXG5cXG4uaGVhZGVyX19zZXR0aW5ncyB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LXBhY2s6IGVuZDtcXG4gICAgICAtbXMtZmxleC1wYWNrOiBlbmQ7XFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XFxufVxcblxcbi5oZWFkZXJfX3NldHRpbmdzIHN2ZyB7XFxuICBoZWlnaHQ6IDQwcHg7XFxufVxcblxcbi5oZWFkZXJfX3NldHRpbmdzOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiBibGFjaztcXG59XFxuXFxuLm1haW5Db250YWluZXJGbGV4IHtcXG4gIHdpZHRoOiAxMDB2dztcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBoZWlnaHQ6IDg4dmg7XFxufVxcblxcbi5tYWluQ29udGFpbmVyIHtcXG4gIGhlaWdodDogOTUlO1xcbiAgZGlzcGxheTogLW1zLWdyaWQ7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZDogXFxcIi4gLiAuXFxcIiAxZnJcXHIgLyAxZnIgMy41ZnIgMWZyO1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fcHJvamVjdExpc3REaXYge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgbWF4LXdpZHRoOiAzNTBweDtcXG4gIG1pbi13aWR0aDogMzUwcHg7XFxuICB3aWR0aDogMjIlO1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcbiAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XFxuICAgICAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX19wcm9qZWN0TGlzdERpdl9faW5wdXQge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiA4MCU7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX19wcm9qZWN0TGlzdERpdl9faW5wdXQgZm9ybSB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLm1haW5Db250YWluZXJfX3Byb2plY3RMaXN0RGl2X19pbnB1dCBmb3JtIGlucHV0IHtcXG4gIG1hcmdpbi10b3A6IDVweDtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzE4MzU1O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgY29sb3I6ICNlOWY1ZGI7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICBwYWRkaW5nOiA1cHggMHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fcHJvamVjdExpc3REaXZfX2lucHV0IGZvcm0gaW5wdXQ6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xcbiAgY29sb3I6ICNlOWY1ZGI7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX19wcm9qZWN0TGlzdERpdl9faW5wdXQgZm9ybSBpbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXIge1xcbiAgY29sb3I6ICNlOWY1ZGI7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX19wcm9qZWN0TGlzdERpdl9faW5wdXQgZm9ybSBpbnB1dDo6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcXG4gIGNvbG9yOiAjZTlmNWRiO1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fcHJvamVjdExpc3REaXZfX2lucHV0IGZvcm0gaW5wdXQ6OnBsYWNlaG9sZGVyIHtcXG4gIGNvbG9yOiAjZTlmNWRiO1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fcHJvamVjdExpc3REaXZfX2lucHV0IGZvcm0gYnV0dG9uIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX19wcm9qZWN0TGlzdERpdl9fcHJvamVjdExpc3Qge1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuICB3aWR0aDogODAlO1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fcHJvamVjdExpc3REaXZfX3Byb2plY3RMaXN0X19wcm9qZWN0Q29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIG1pbi1oZWlnaHQ6IDQwcHg7XFxuICBtYXJnaW4tdG9wOiA1cHg7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX19wcm9qZWN0TGlzdERpdl9fcHJvamVjdExpc3RfX3Byb2plY3RDb250YWluZXIgLnByb2plY3ROYW1lIHtcXG4gIHBhZGRpbmctbGVmdDogMyU7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiA4NSU7XFxuICBib3JkZXItcmFkaXVzOiA1cHggMHB4IDBweCA1cHg7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNmYyZjA7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX19wcm9qZWN0TGlzdERpdl9fcHJvamVjdExpc3RfX3Byb2plY3RDb250YWluZXIgLnByb2plY3ROYW1lOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM3MTgzNTU7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX19wcm9qZWN0TGlzdERpdl9fcHJvamVjdExpc3RfX3Byb2plY3RDb250YWluZXIgLnByb2plY3REZWxldGVCdXR0b24ge1xcbiAgY29sb3I6ICNmNmYyZjA7XFxuICB3aWR0aDogMTUlO1xcbiAgYXNwZWN0LXJhdGlvOiAxLzE7XFxuICBib3JkZXItcmFkaXVzOiAwcHggNXB4IDVweCAwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjZmMmYwO1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fcHJvamVjdExpc3REaXZfX3Byb2plY3RMaXN0X19wcm9qZWN0Q29udGFpbmVyIC5wcm9qZWN0RGVsZXRlQnV0dG9uOmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiAjZWU1YTVhO1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fcHJvamVjdExpc3REaXZfX3Byb2plY3RMaXN0X19wcm9qZWN0Q29udGFpbmVyOmhvdmVyIC5wcm9qZWN0TmFtZSB7XFxuICBjb2xvcjogI2U5ZjVkYjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM3MTgzNTU7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX19wcm9qZWN0TGlzdERpdl9fcHJvamVjdExpc3RfX3Byb2plY3RDb250YWluZXI6aG92ZXIgLnByb2plY3REZWxldGVCdXR0b24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzcxODM1NTtcXG59XFxuXFxuLm1haW5Db250YWluZXJfX3Byb2plY3RMaXN0RGl2X19wcm9qZWN0TGlzdF9fcHJvamVjdENvbnRhaW5lclN0YXRpYyB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgLXdlYmtpdC1ib3gtcGFjazoganVzdGlmeTtcXG4gICAgICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5O1xcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBtYXJnaW4tdG9wOiA1cHg7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX19wcm9qZWN0TGlzdERpdl9fcHJvamVjdExpc3RfX3Byb2plY3RDb250YWluZXJTdGF0aWMgLnByb2plY3ROYW1lIHtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIHBhZGRpbmctbGVmdDogMyU7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjZmMmYwO1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fcHJvamVjdExpc3REaXZfX3Byb2plY3RMaXN0X19wcm9qZWN0Q29udGFpbmVyU3RhdGljIC5wcm9qZWN0TmFtZTpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogI2U5ZjVkYjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM3MTgzNTU7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX190YXNrTGlzdERpdiB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX190YXNrTGlzdERpdl9fY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fdGFza0xpc3REaXZfX2NvbnRhaW5lciAuaGVhZGVyRm9yT2JqZWN0cyB7XFxuICBmb250LXNpemU6IDJyZW07XFxuICBoZWlnaHQ6IDIuNXJlbTtcXG4gIG1hcmdpbi1sZWZ0OiAyNXB4O1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBtYXJnaW46IDEwcHggMHB4IDVweCAyNXB4O1xcbiAgY29sb3I6ICM3MTgzNTU7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX190YXNrTGlzdERpdl9fY29udGFpbmVyIC50YXNrQ29udGFpbmVyIHtcXG4gIG1hcmdpbi10b3A6IDNweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWluLWhlaWdodDogMzVweDtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZjVkYjtcXG4gIGNvbG9yOiAjNzE4MzU1O1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgcGFkZGluZzogNXB4IDBweDtcXG59XFxuXFxuLm1haW5Db250YWluZXJfX3Rhc2tMaXN0RGl2X19jb250YWluZXIgLnRhc2tDb250YWluZXIgLmVkaXRUYXNrIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBib3JkZXI6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmYWVmO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fdGFza0xpc3REaXZfX2NvbnRhaW5lciAudGFza0NvbnRhaW5lciAudGFza1RpdGxlRWRpdCB7XFxuICB3aWR0aDogMTAlO1xcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxuICBtaW4td2lkdGg6IDExNHB4O1xcbiAgLXdlYmtpdC1ib3gtcGFjazogZW5kO1xcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGVuZDtcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG59XFxuXFxuLm1haW5Db250YWluZXJfX3Rhc2tMaXN0RGl2X19jb250YWluZXIgLnRhc2tDb250YWluZXIgLnRhc2tEYXRlRWRpdCB7XFxuICBtaW4td2lkdGg6IDEwMHB4O1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX190YXNrTGlzdERpdl9fY29udGFpbmVyIC50YXNrQ29udGFpbmVyIC50YXNrTm90ZUVkaXQge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX190YXNrTGlzdERpdl9fY29udGFpbmVyIC50YXNrQ29udGFpbmVyIC50YXNrTGluZURpdmlkZXJEaXYge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIG1pbi13aWR0aDogMjBweDtcXG4gIG1pbi1oZWlnaHQ6IDM1cHg7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX190YXNrTGlzdERpdl9fY29udGFpbmVyIC50YXNrQ29udGFpbmVyIC50YXNrTGluZURpdmlkZXJEaXYgLnRhc2tMaW5lRGl2aWRlciB7XFxuICBtaW4taGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDJweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM4MjkyNjk0ZjtcXG59XFxuXFxuLm1haW5Db250YWluZXJfX3Rhc2tMaXN0RGl2X19jb250YWluZXIgLnRhc2tDb250YWluZXIgLnRhc2tUaXRsZSB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgd2lkdGg6IDEwJTtcXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xcbiAgbWluLXdpZHRoOiAxMTRweDtcXG4gIC13ZWJraXQtYm94LXBhY2s6IGVuZDtcXG4gICAgICAtbXMtZmxleC1wYWNrOiBlbmQ7XFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX190YXNrTGlzdERpdl9fY29udGFpbmVyIC50YXNrQ29udGFpbmVyIC50YXNrRGF0ZSB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIG1pbi13aWR0aDogMTAwcHg7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX190YXNrTGlzdERpdl9fY29udGFpbmVyIC50YXNrQ29udGFpbmVyIC50YXNrTm90ZSB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fdGFza0xpc3REaXZfX2NvbnRhaW5lciAudGFza0NvbnRhaW5lciAudGFza0J1dHRvbnMge1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgbWluLXdpZHRoOiA2MHB4O1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX190YXNrTGlzdERpdl9fY29udGFpbmVyIC50YXNrQ29udGFpbmVyIC50YXNrQnV0dG9ucyAudGFza0RlbGV0ZSB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXG4gICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgd2lkdGg6IDM1cHg7XFxuICBjb2xvcjogIzcxODM1NTFlO1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fdGFza0xpc3REaXZfX2NvbnRhaW5lciAudGFza0NvbnRhaW5lciAudGFza0J1dHRvbnMgLnRhc2tEZWxldGU6aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgY29sb3I6ICNlZTVhNWEgIWltcG9ydGFudDtcXG59XFxuXFxuLm1haW5Db250YWluZXJfX3Rhc2tMaXN0RGl2X19jb250YWluZXIgLnRhc2tDb250YWluZXIgLnRhc2tCdXR0b25zIC50YXNrRWRpdCB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXG4gICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgd2lkdGg6IDI1cHg7XFxuICBjb2xvcjogIzcxODM1NTFlO1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fdGFza0xpc3REaXZfX2NvbnRhaW5lciAudGFza0NvbnRhaW5lciAudGFza0J1dHRvbnMgLnRhc2tFZGl0OmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGNvbG9yOiBibGFjayAhaW1wb3J0YW50O1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fdGFza0xpc3REaXZfX2NvbnRhaW5lciAudGFza0NvbnRhaW5lciAudGFza0J1dHRvbnMgLnRhc2tDb25maXJtRWRpdCB7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBjb2xvcjogIzA4NzQwODtcXG4gIHdpZHRoOiAyNXB4O1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fdGFza0xpc3REaXZfX2NvbnRhaW5lciAudGFza0NvbnRhaW5lciAudGFza0J1dHRvbnMgLnRhc2tDb25maXJtRWRpdDpob3ZlciB7XFxuICBkaXNwbGF5OiBjdXJzb3I7XFxuICBjb2xvcjogIzUwYTg1MDtcXG59XFxuXFxuLm1haW5Db250YWluZXJfX3Rhc2tMaXN0RGl2X19jb250YWluZXIgLnRhc2tDb250YWluZXI6aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fdGFza0xpc3REaXZfX2NvbnRhaW5lciAudGFza0NvbnRhaW5lcjpob3ZlciAudGFza0J1dHRvbnMgLnRhc2tEZWxldGUge1xcbiAgY29sb3I6ICM3MTgzNTU7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX190YXNrTGlzdERpdl9fY29udGFpbmVyIC50YXNrQ29udGFpbmVyOmhvdmVyIC50YXNrQnV0dG9ucyAudGFza0VkaXQge1xcbiAgY29sb3I6ICM3MTgzNTU7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX190YXNrSW5wdXREaXYge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIG1heC13aWR0aDogMzUwcHg7XFxuICBtaW4td2lkdGg6IDM1MHB4O1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fdGFza0lucHV0RGl2ICNuZXdUYXNrRm9ybSB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxuICAtd2Via2l0LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcXG4gICAgICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHdpZHRoOiA4MCU7XFxuICBjb2xvcjogIzcxODM1NTtcXG59XFxuXFxuLm1haW5Db250YWluZXJfX3Rhc2tJbnB1dERpdiAjbmV3VGFza0Zvcm0gaDIge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fdGFza0lucHV0RGl2ICNuZXdUYXNrRm9ybSBpbnB1dCB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzE4MzU1O1xcbiAgZm9udC1zaXplOiAxLjJyZW07XFxuICBoZWlnaHQ6IDIuNXJlbTtcXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICBjb2xvcjogI2U5ZjVkYjtcXG4gIHBhZGRpbmc6IDBweCAxMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbn1cXG5cXG4ubWFpbkNvbnRhaW5lcl9fdGFza0lucHV0RGl2ICNuZXdUYXNrRm9ybSAuaW5wdXRUYXNrSGVhZGVyIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuXFxuLm1haW5Db250YWluZXJfX3Rhc2tJbnB1dERpdiAjbmV3VGFza0Zvcm0gLmlucHV0VGFza0hlYWRlciAudGFza0Vycm9yIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgY29sb3I6IHJlZDtcXG59XFxuXFxuLm1haW5Db250YWluZXJfX3Rhc2tJbnB1dERpdiAjbmV3VGFza0Zvcm0gYnV0dG9uIHtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xcbiAgbWFyZ2luLXRvcDogMTBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICBib3JkZXI6ICM3MTgzNTUgMnB4IHNvbGlkO1xcbiAgY29sb3I6ICM3MTgzNTU7XFxuICBoZWlnaHQ6IDIuNXJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlOWY1ZGI7XFxufVxcblxcbi5tYWluQ29udGFpbmVyX190YXNrSW5wdXREaXYgI25ld1Rhc2tGb3JtIGJ1dHRvbjpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5kYW5nZXJDb2xvdXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlNWE1YSAhaW1wb3J0YW50O1xcbiAgZm9udC1zaXplOiAycmVtO1xcbn1cXG5cXG4uZGFuZ2VyQ29sb3VyOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtcXG4gIGNvbG9yOiBibGFjayAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZGFuZ2VyQ29sb3VyOi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7XFxuICBjb2xvcjogYmxhY2sgIWltcG9ydGFudDtcXG59XFxuXFxuLmRhbmdlckNvbG91cjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcXG4gIGNvbG9yOiBibGFjayAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZGFuZ2VyQ29sb3VyOjpwbGFjZWhvbGRlciB7XFxuICBjb2xvcjogYmxhY2sgIWltcG9ydGFudDtcXG59XFxuXFxuLmN1cnJlbnRseVNlbGVjdGVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM3MTgzNTUgIWltcG9ydGFudDtcXG59XFxuXFxuLmN1cnJlbnRseVNlbGVjdGVkRm9udENvbG91ciB7XFxuICBjb2xvcjogI2U5ZjVkYiAhaW1wb3J0YW50O1xcbn1cXG5cXG4uY29tcGxldGVkVGFzayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjRhZmFmICFpbXBvcnRhbnQ7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUwNykgIWltcG9ydGFudDtcXG59XFxuXFxuZm9vdGVyIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzE4MzU1O1xcbiAgY29sb3I6ICNlOWY1ZGI7XFxuICBtaW4taGVpZ2h0OiAydmg7XFxuICB3aWR0aDogMTAwdnc7XFxufVxcblxcbi5jb25maXJtRGVsZXRlUHJvamVjdE1vZGFsIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxMDB2dztcXG4gIGhlaWdodDogMTAwdmg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjc0KTtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBjb2xvcjogI2U5ZjVkYjtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5jb25maXJtRGVsZXRlUHJvamVjdE1vZGFsIC5kZWxldGVDb25maXJtYXRpb25Nb2RhbCB7XFxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzcxODM1NTtcXG4gIHdpZHRoOiAyMHZ3O1xcbiAgaGVpZ2h0OiAyMDBweDtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgLW1zLWZsZXgtcGFjazogZGlzdHJpYnV0ZTtcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmNvbmZpcm1EZWxldGVQcm9qZWN0TW9kYWwgLmRlbGV0ZU1vZGFsUGFyYWdyYXBoIHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBncmlkLWFyZWE6IGRlbGV0ZU1vZGFsUGFyYWdyYXBoO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiAxLjJyZW07XFxuICB3aWR0aDogODAlO1xcbn1cXG5cXG4uY29uZmlybURlbGV0ZVByb2plY3RNb2RhbCAuYnV0dG9uc0luTW9kYWwge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtbXMtZmxleC1wYWNrOiBkaXN0cmlidXRlO1xcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcXG4gICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgd2lkdGg6IDgwJTtcXG59XFxuXFxuLmNvbmZpcm1EZWxldGVQcm9qZWN0TW9kYWwgLmJ1dHRvbnNJbk1vZGFsIC5kZWxldGVNb2RhbENvbmZpcm0ge1xcbiAgZ3JpZC1hcmVhOiBkZWxldGVNb2RhbENvbmZpcm07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjMzNjM2O1xcbn1cXG5cXG4uY29uZmlybURlbGV0ZVByb2plY3RNb2RhbCAuYnV0dG9uc0luTW9kYWwgLmRlbGV0ZU1vZGFsQ29uZmlybTpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWU1YTVhO1xcbn1cXG5cXG4uY29uZmlybURlbGV0ZVByb2plY3RNb2RhbCAuYnV0dG9uc0luTW9kYWwgLmRlbGV0ZU1vZGFsRGVueSB7XFxuICBncmlkLWFyZWE6IGRlbGV0ZU1vZGFsRGVueTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlOWY1ZGI7XFxufVxcblxcbi5jb25maXJtRGVsZXRlUHJvamVjdE1vZGFsIC5idXR0b25zSW5Nb2RhbCAuZGVsZXRlTW9kYWxEZW55OmhvdmVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNhM2FjOWE7XFxufVxcblxcbi5jb25maXJtRGVsZXRlUHJvamVjdE1vZGFsIC5idXR0b25zSW5Nb2RhbCAuZGVsZXRlQnV0dG9uc01vZGFsIHtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXG4gICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcXG4gICAgICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgZm9udC1zaXplOiAyO1xcbiAgcGFkZGluZzogMTBweCA1MHB4O1xcbn1cXG5cXG4uc2V0dGluZ3NEcm9wZG93biB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBvcmFuZ2U7XFxufVxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlLmNzcy5tYXAgKi9cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUvc3R5bGUuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNDLFdBQVc7RUFDWCxZQUFZO0FDRWI7O0FEV0E7RUFDQyxnQ0FIaUM7RUFJakMsZ0JBQWdCO0FDUmpCOztBRFdBO0VBQ0MsWUFBWTtFQUNaLFlBQVk7RUFDWixpQkFBYTtFQUNiLGFBQ0M7RUFHRCxr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QixrQkFBa0I7RUFDbEIsaUJBQWlCO0VBQ2pCLFVBQVU7QUFDWjs7QUFFQTtFQUNFLG9CQUFvQjtFQUNwQixvQkFBb0I7RUFDcEIsYUFBYTtFQUNiLHlCQUF5QjtNQUNyQiw2QkFBNkI7RUFDakMseUJBQXlCO01BQ3JCLHNCQUFzQjtVQUNsQixtQkFBbUI7RUFDM0IsVUFBVTtBQUNaOztBQUVBO0VBQ0UsNkJBQTZCO0VBQzdCLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLGVBQWU7RUFDZix5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSwwQkFBMEI7RUFDMUIseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLG1CQUFtQjtFQUNuQixvQkFBb0I7RUFDcEIsb0JBQW9CO0VBQ3BCLGFBQWE7RUFDYix3QkFBd0I7TUFDcEIscUJBQXFCO1VBQ2pCLHVCQUF1QjtFQUMvQix5QkFBeUI7TUFDckIsc0JBQXNCO1VBQ2xCLG1CQUFtQjtFQUMzQixZQUFZO0VBQ1osWUFBWTtFQUNaLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQix3QkFBd0I7QUFDMUI7QUFDQSxvQ0FBb0NcIixcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhzdHlsZSwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICByZXR1cm4gc3R5bGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZSkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShcIm1lZGlhXCIpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlLCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZSkge1xuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiY2xhc3MgVGFzayB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSwgZGF0ZSwgbm90ZSwgcHJvamVjdCl7XHJcbiAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0LFxyXG4gICAgdGhpcy50aXRsZSA9IHRpdGxlLFxyXG4gICAgdGhpcy5kYXRlID0gZGF0ZSxcclxuICAgIHRoaXMubm90ZSA9IG5vdGUsXHJcbiAgICB0aGlzLmNvbXBsZXRlZCA9IGZhbHNlLFxyXG4gICAgdGhpcy5pZCA9IE1hdGgucmFuZG9tKCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBUYXNrIH0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXQuaW8vZmp1bGVcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzVmFsaWRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdmFsaWQ/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGFyZ3VtZW50IGlzIEludmFsaWQgRGF0ZSBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gKiBBcmd1bWVudCBpcyBjb252ZXJ0ZWQgdG8gRGF0ZSB1c2luZyBgdG9EYXRlYC4gU2VlIFt0b0RhdGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlfVxuICogSW52YWxpZCBEYXRlIGlzIGEgRGF0ZSwgd2hvc2UgdGltZSB2YWx1ZSBpcyBOYU4uXG4gKlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIE5vdyBgaXNWYWxpZGAgZG9lc24ndCB0aHJvdyBhbiBleGNlcHRpb25cbiAqICAgaWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICogICBJbnN0ZWFkLCBhcmd1bWVudCBpcyBjb252ZXJ0ZWQgYmVmb3JlaGFuZCB1c2luZyBgdG9EYXRlYC5cbiAqXG4gKiAgIEV4YW1wbGVzOlxuICpcbiAqICAgfCBgaXNWYWxpZGAgYXJndW1lbnQgICAgICAgIHwgQmVmb3JlIHYyLjAuMCB8IHYyLjAuMCBvbndhcmQgfFxuICogICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18XG4gKiAgIHwgYG5ldyBEYXRlKClgICAgICAgICAgICAgICB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoJzIwMTYtMDEtMDEnKWAgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgnJylgICAgICAgICAgICAgfCBgZmFsc2VgICAgICAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKDE0ODgzNzA4MzUwODEpYCB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoTmFOKWAgICAgICAgICAgIHwgYGZhbHNlYCAgICAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAnMjAxNi0wMS0wMSdgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYCcnYCAgICAgICAgICAgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgMTQ4ODM3MDgzNTA4MWAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBOYU5gICAgICAgICAgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKlxuICogICBXZSBpbnRyb2R1Y2UgdGhpcyBjaGFuZ2UgdG8gbWFrZSAqZGF0ZS1mbnMqIGNvbnNpc3RlbnQgd2l0aCBFQ01BU2NyaXB0IGJlaGF2aW9yXG4gKiAgIHRoYXQgdHJ5IHRvIGNvZXJjZSBhcmd1bWVudHMgdG8gdGhlIGV4cGVjdGVkIHR5cGVcbiAqICAgKHdoaWNoIGlzIGFsc28gdGhlIGNhc2Ugd2l0aCBvdGhlciAqZGF0ZS1mbnMqIGZ1bmN0aW9ucykuXG4gKlxuICogQHBhcmFtIHsqfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB2YWxpZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsaWQgZGF0ZTpcbiAqIHZhciByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIHZhciByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiB2YXIgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgnJykpXG4gKiAvLz0+IGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNWYWxpZChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHJldHVybiAhaXNOYU4oZGF0ZSk7XG59IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciByZXN1bHQ7XG5cbiAgaWYgKHR5cGVvZiBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0gPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAnaW4gJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICcgYWdvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoUGF0dGVybkZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MubWF0Y2hQYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG4gICAgaWYgKCFwYXJzZVJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKSA6IHBhcnNlUmVzdWx0WzBdO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eUluZGV4LCBkaXJ0eU9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgY29udGV4dCA9IG9wdGlvbnMuY29udGV4dCA/IFN0cmluZyhvcHRpb25zLmNvbnRleHQpIDogJ3N0YW5kYWxvbmUnO1xuICAgIHZhciB2YWx1ZXNBcnJheTtcblxuICAgIGlmIChjb250ZXh0ID09PSAnZm9ybWF0dGluZycgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICB2YXIgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIHx8IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9kZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFyIF93aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLnZhbHVlc1tfd2lkdGhdIHx8IGFyZ3MudmFsdWVzW19kZWZhdWx0V2lkdGhdO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayhkaXJ0eUluZGV4KSA6IGRpcnR5SW5kZXg7IC8vIEB0cy1pZ25vcmU6IEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGFuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG5cbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VQYXR0ZXJucyA9IHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5wYXJzZVBhdHRlcm5zW2FyZ3MuZGVmYXVsdFBhcnNlV2lkdGhdO1xuICAgIHZhciBrZXkgPSBBcnJheS5pc0FycmF5KHBhcnNlUGF0dGVybnMpID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pIDogZmluZEtleShwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KTtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2soa2V5KSA6IGtleTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG5cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMFxuICAgIC8qIFN1bmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07IC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgX2RpcnR5T3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgOlxuICAvL1xuICAvLyAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9XG4gIC8vICAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KVxuICAvL1xuICAvLyB3aGVyZSBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJ1xuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn1cblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHF1YXJ0ZXIpIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanNcIjtcbmltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzXCI7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpL2ksXG4gIHdpZGU6IC9eKGphbnVhcnl8ZmVicnVhcnl8bWFyY2h8YXByaWx8bWF5fGp1bmV8anVseXxhdWd1c3R8c2VwdGVtYmVyfG9jdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHxtaXxufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaSxcbiAgYW55OiAvXihbYXBdXFwuP1xccz9tXFwuP3xtaWRuaWdodHxub29ufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pL2ksXG4gICAgbm9vbjogL15uby9pLFxuICAgIG1vcm5pbmc6IC9tb3JuaW5nL2ksXG4gICAgYWZ0ZXJub29uOiAvYWZ0ZXJub29uL2ksXG4gICAgZXZlbmluZzogL2V2ZW5pbmcvaSxcbiAgICBuaWdodDogL25pZ2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gYWRkTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciB0aW1lc3RhbXAgPSB0b0RhdGUoZGlydHlEYXRlKS5nZXRUaW1lKCk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgYW1vdW50KTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBzdWJ0cmFjdGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFN1YnRyYWN0IDc1MCBtaWxsaXNlY29uZHMgZnJvbSAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gc3ViTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ViTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gJ3l5JyA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENEYXlPZlllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mWWVhclRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgZGlmZmVyZW5jZSA9IHRpbWVzdGFtcCAtIHN0YXJ0T2ZZZWFyVGltZXN0YW1wO1xuICByZXR1cm4gTWF0aC5mbG9vcihkaWZmZXJlbmNlIC8gTUlMTElTRUNPTkRTX0lOX0RBWSkgKyAxO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSAxO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhcik7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyKTtcblxuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ0lTT1dlZWsoZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRhdGUpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgZGlydHlPcHRpb25zKTtcbiAgdmFyIGZpcnN0V2Vla09mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZUaGlzWWVhciwgZGlydHlPcHRpb25zKTtcblxuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vlay5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrLCBkaXJ0eU9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbnZhciBkYXlQZXJpb2RFbnVtID0ge1xuICBhbTogJ2FtJyxcbiAgcG06ICdwbScsXG4gIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICBub29uOiAnbm9vbicsXG4gIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICBuaWdodDogJ25pZ2h0J1xufTtcbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gKiB8ICBiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICB8ICBCICB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICB8XG4gKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBlICB8IExvY2FsIGRheSBvZiB3ZWVrICAgICAgICAgICAgICB8ICBFICB8IERheSBvZiB3ZWVrICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gKiB8ICBrICB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICB8ICBLICB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBuICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBOICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPICB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gKiB8ICBwISB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICB8ICBQISB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICB8XG4gKiB8ICBxICB8IFN0YW5kLWFsb25lIHF1YXJ0ZXIgICAgICAgICAgICB8ICBRICB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB0ISB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICB8ICBUISB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICB8XG4gKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gKiB8ICB3ICB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICB8ICBXKiB8IFdlZWsgb2YgbW9udGggICAgICAgICAgICAgICAgICB8XG4gKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gKiB8ICB6ICB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSB8ICBaKiB8IFRpbWV6b25lIChhbGlhc2VzKSAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYGZvcm1hdGAgZG9jcylcbiAqIC0gYGlgIGlzIElTTyBkYXkgb2Ygd2Vlay4gRm9yIGBpYCBhbmQgYGlpYCBpcyByZXR1cm5zIG51bWVyaWMgSVNPIHdlZWsgZGF5cyxcbiAqICAgaS5lLiA3IGZvciBTdW5kYXksIDEgZm9yIE1vbmRheSwgZXRjLlxuICogLSBgSWAgaXMgSVNPIHdlZWsgb2YgeWVhciwgYXMgb3Bwb3NlZCB0byBgd2Agd2hpY2ggaXMgbG9jYWwgd2VlayBvZiB5ZWFyLlxuICogLSBgUmAgaXMgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIsIGFzIG9wcG9zZWQgdG8gYFlgIHdoaWNoIGlzIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIuXG4gKiAgIGBSYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYElgIGFuZCBgaWBcbiAqICAgZm9yIHVuaXZlcnNhbCBJU08gd2Vlay1udW1iZXJpbmcgZGF0ZSwgd2hlcmVhc1xuICogICBgWWAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGB3YCBhbmQgYGVgXG4gKiAgIGZvciB3ZWVrLW51bWJlcmluZyBkYXRlIHNwZWNpZmljIHRvIHRoZSBsb2NhbGUuXG4gKiAtIGBQYCBpcyBsb25nIGxvY2FsaXplZCBkYXRlIGZvcm1hdFxuICogLSBgcGAgaXMgbG9uZyBsb2NhbGl6ZWQgdGltZSBmb3JtYXRcbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gRXJhXG4gIEc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZXJhID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG5cbiAgICAgIGNhc2UgJ0dHR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgfSk7XG4gICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuXG4gICAgICBjYXNlICdHR0dHJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAneW8nKSB7XG4gICAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2lnbmVkV2Vla1llYXIgPSBnZXRVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyOyAvLyBUd28gZGlnaXQgeWVhclxuXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfSAvLyBPcmRpbmFsIG51bWJlclxuXG5cbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfSAvLyBQYWRkaW5nXG5cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBpc29XZWVrWWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRhdGUpOyAvLyBQYWRkaW5nXG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFF1YXJ0ZXJcbiAgUTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdRUSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAnUW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdRUVFRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ3EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcblxuICAgICAgY2FzZSAncXEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ00nOlxuICAgICAgY2FzZSAnTU0nOlxuICAgICAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLk0oZGF0ZSwgdG9rZW4pO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdNbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTG8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ0xMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdMTExMJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2VlayA9IGdldFVUQ1dlZWsoZGF0ZSwgb3B0aW9ucyk7XG5cbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrIG9mIHllYXJcbiAgSTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBpc29XZWVrID0gZ2V0VVRDSVNPV2VlayhkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvV2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnZG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0RhdGUoKSwge1xuICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZZZWFyID0gZ2V0VVRDRGF5T2ZZZWFyKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnRG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXlPZlllYXIsIHtcbiAgICAgICAgdW5pdDogJ2RheU9mWWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ0UnOlxuICAgICAgY2FzZSAnRUUnOlxuICAgICAgY2FzZSAnRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnRUVFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ0VFRUUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoTnRoIGRheSBvZiB3ZWVrIHdpdGggY3VycmVudCBsb2NhbGUgb3Igd2Vla1N0YXJ0c09uKVxuICAgICAgY2FzZSAnZSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdlZSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2VlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2VlZWUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdjbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBpc29EYXlPZldlZWsgPSBkYXlPZldlZWsgPT09IDAgPyA3IDogZGF5T2ZXZWVrO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSAnaSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcoaXNvRGF5T2ZXZWVrKTtcbiAgICAgIC8vIDAyXG5cbiAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29EYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAybmRcblxuICAgICAgY2FzZSAnaW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29EYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZVxuXG4gICAgICBjYXNlICdpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdpaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnaWlpaSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgIGNhc2UgJ2JiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmJiJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ0InOlxuICAgICAgY2FzZSAnQkInOlxuICAgICAgY2FzZSAnQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnaG8nKSB7XG4gICAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAxMjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5IKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0xMV1cbiAgSzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuXG4gICAgaWYgKHRva2VuID09PSAnS28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzEtMjRdXG4gIGs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDI0O1xuXG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdzbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB7XG4gICAgICAgIHVuaXQ6ICdzZWNvbmQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcblxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKEdNVClcbiAgTzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3Iob3JpZ2luYWxEYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVNob3J0KG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCk7XG4gIHZhciBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjA7XG5cbiAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gc2lnbiArIFN0cmluZyhob3Vycyk7XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKE1hdGguYWJzKG9mZnNldCkgLyA2MCwgMik7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImZ1bmN0aW9uIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0aW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/Lyk7XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcblxuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG5cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuXG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBkYXRlVGltZUZvcm1hdC5yZXBsYWNlKCd7e2RhdGV9fScsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSkucmVwbGFjZSgne3t0aW1lfX0nLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufVxuXG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG5leHBvcnQgZGVmYXVsdCBsb25nRm9ybWF0dGVyczsiLCIvKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkge1xuICB2YXIgdXRjRGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCksIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn0iLCJ2YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdEJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfVxufSIsImltcG9ydCBpc1ZhbGlkIGZyb20gXCIuLi9pc1ZhbGlkL2luZGV4LmpzXCI7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5pbXBvcnQgc3ViTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9zdWJNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBsb25nRm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4sIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiwgdGhyb3dQcm90ZWN0ZWRFcnJvciB9IGZyb20gXCIuLi9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgUmVnRXhwIGNvbnNpc3RzIG9mIHRocmVlIHBhcnRzIHNlcGFyYXRlZCBieSBgfGA6XG4vLyAtIFt5WVFxTUx3SWREZWNpaEhLa21zXW8gbWF0Y2hlcyBhbnkgYXZhaWxhYmxlIG9yZGluYWwgbnVtYmVyIHRva2VuXG4vLyAgIChvbmUgb2YgdGhlIGNlcnRhaW4gbGV0dGVycyBmb2xsb3dlZCBieSBgb2ApXG4vLyAtIChcXHcpXFwxKiBtYXRjaGVzIGFueSBzZXF1ZW5jZXMgb2YgdGhlIHNhbWUgbGV0dGVyXG4vLyAtICcnIG1hdGNoZXMgdHdvIHF1b3RlIGNoYXJhY3RlcnMgaW4gYSByb3dcbi8vIC0gJygnJ3xbXiddKSsoJ3wkKSBtYXRjaGVzIGFueXRoaW5nIHN1cnJvdW5kZWQgYnkgdHdvIHF1b3RlIGNoYXJhY3RlcnMgKCcpLFxuLy8gICBleGNlcHQgYSBzaW5nbGUgcXVvdGUgc3ltYm9sLCB3aGljaCBlbmRzIHRoZSBzZXF1ZW5jZS5cbi8vICAgVHdvIHF1b3RlIGNoYXJhY3RlcnMgZG8gbm90IGVuZCB0aGUgc2VxdWVuY2UuXG4vLyAgIElmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHNpbmdsZSBxdW90ZVxuLy8gICB0aGVuIHRoZSBzZXF1ZW5jZSB3aWxsIGNvbnRpbnVlIHVudGlsIHRoZSBlbmQgb2YgdGhlIHN0cmluZy5cbi8vIC0gLiBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyIHVubWF0Y2hlZCBieSBwcmV2aW91cyBwYXJ0cyBvZiB0aGUgUmVnRXhwc1xuXG52YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9beVlRcU1Md0lkRGVjaWhIS2ttc11vfChcXHcpXFwxKnwnJ3wnKCcnfFteJ10pKygnfCQpfC4vZzsgLy8gVGhpcyBSZWdFeHAgY2F0Y2hlcyBzeW1ib2xzIGVzY2FwZWQgYnkgcXVvdGVzLCBhbmQgYWxzb1xuLy8gc2VxdWVuY2VzIG9mIHN5bWJvbHMgUCwgcCwgYW5kIHRoZSBjb21iaW5hdGlvbnMgbGlrZSBgUFBQUFBQUHBwcHBwYFxuXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG4vKipcbiAqIEBuYW1lIGZvcm1hdFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTdSwgU2EgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU3UsIFNhICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFN1LCBTYSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTdSwgU2EgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiA5LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRoZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgbm93IHJlcXVpcmVkIGZvciB0aGUgc2FrZSBvZiBleHBsaWNpdG5lc3MuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICogICBmb3JtYXQobmV3IERhdGUoMjAxNiwgMCwgMSksIFwieXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU3h4eFwiKVxuICogICBgYGBcbiAqXG4gKiAtIE5ldyBmb3JtYXQgc3RyaW5nIEFQSSBmb3IgYGZvcm1hdGAgZnVuY3Rpb25cbiAqICAgd2hpY2ggaXMgYmFzZWQgb24gW1VuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNV0oaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZSkuXG4gKiAgIFNlZSBbdGhpcyBwb3N0XShodHRwczovL2Jsb2cuZGF0ZS1mbnMub3JnL3Bvc3QvdW5pY29kZS10b2tlbnMtaW4tZGF0ZS1mbnMtdjItc3JlYXR5a2k5MWpnKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIC0gQ2hhcmFjdGVycyBhcmUgbm93IGVzY2FwZWQgdXNpbmcgc2luZ2xlIHF1b3RlIHN5bWJvbHMgKGAnYCkgaW5zdGVhZCBvZiBzcXVhcmUgYnJhY2tldHMuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSBkYXkgb2YgeWVhciB0b2tlbnMgYERgIGFuZCBgRERgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgfHwgZGVmYXVsdExvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmxvY2FsaXplKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbG9jYWxpemUgcHJvcGVydHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmZvcm1hdExvbmcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBmb3JtYXRMb25nIHByb3BlcnR5Jyk7XG4gIH1cblxuICB2YXIgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG5cbiAgaWYgKCFpc1ZhbGlkKG9yaWdpbmFsRGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH0gLy8gQ29udmVydCB0aGUgZGF0ZSBpbiBzeXN0ZW0gdGltZXpvbmUgdG8gdGhlIHNhbWUgZGF0ZSBpbiBVVEMrMDA6MDAgdGltZXpvbmUuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4gVVRDIGZ1bmN0aW9ucyB3aWxsIGJlIGltcGxlbWVudGVkLCBsb2NhbGVzIHdpbGwgYmUgY29tcGF0aWJsZSB3aXRoIHRoZW0uXG4gIC8vIFNlZSBhbiBpc3N1ZSBhYm91dCBVVEMgZnVuY3Rpb25zOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5cbiAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUpO1xuICB2YXIgdXRjRGF0ZSA9IHN1Yk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUsIHRpbWV6b25lT2Zmc2V0KTtcbiAgdmFyIGZvcm1hdHRlck9wdGlvbnMgPSB7XG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiBmaXJzdFdlZWtDb250YWluc0RhdGUsXG4gICAgd2Vla1N0YXJ0c09uOiB3ZWVrU3RhcnRzT24sXG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgX29yaWdpbmFsRGF0ZTogb3JpZ2luYWxEYXRlXG4gIH07XG4gIHZhciByZXN1bHQgPSBmb3JtYXRTdHIubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcbiAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgIHJldHVybiBcIidcIjtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICByZXR1cm4gY2xlYW5Fc2NhcGVkU3RyaW5nKHN1YnN0cmluZyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuXG4gICAgaWYgKGZvcm1hdHRlcikge1xuICAgICAgaWYgKCFvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb3JtYXR0ZXIodXRjRGF0ZSwgc3Vic3RyaW5nLCBsb2NhbGUubG9jYWxpemUsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cClbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufSIsImltcG9ydCBmb3JtYXQgZnJvbSBcImRhdGUtZm5zL2Zvcm1hdFwiO1xyXG5cclxuY29uc3QgcHJvamVjdHNDb250YWluZXJEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW5Db250YWluZXJfX3Byb2plY3RMaXN0RGl2X19wcm9qZWN0TGlzdFwiKVxyXG5jb25zdCB0YXNrc0NvbnRhaW5lckRpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWFpbkNvbnRhaW5lcl9fdGFza0xpc3REaXZfX2NvbnRhaW5lclwiKVxyXG5jb25zdCBwcm9qZWN0RGVsZXRlTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbmZpcm1EZWxldGVQcm9qZWN0TW9kYWxcIilcclxuXHJcbmNvbnN0IFByb2plY3RzRE9NID0gKGZ1bmN0aW9uKCl7XHJcblxyXG5cdGNvbnN0IHJlbmRlclNpbmdsZSA9IGZ1bmN0aW9uKHByb2plY3ROYW1lKXtcclxuXHJcblxyXG5cdFx0Y29uc3QgbWFpbkNvbnRhaW5lckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcclxuXHRcdGNvbnN0IHByb2plY3ROYW1lRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG5cclxuXHRcdG1haW5Db250YWluZXJEaXYuc2V0QXR0cmlidXRlKFwiaWRcIiwgcHJvamVjdE5hbWUpXHJcblx0XHRtYWluQ29udGFpbmVyRGl2LmNsYXNzTGlzdC5hZGQoXCJtYWluQ29udGFpbmVyX19wcm9qZWN0TGlzdERpdl9fcHJvamVjdExpc3RfX3Byb2plY3RDb250YWluZXJcIilcclxuXHRcdHByb2plY3ROYW1lRGl2LmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0TmFtZVwiKVxyXG5cclxuXHRcdHByb2plY3ROYW1lID0gcHJvamVjdE5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9qZWN0TmFtZS5zbGljZSgxKTtcclxuXHRcdFxyXG5cdFx0cHJvamVjdE5hbWVEaXYuaW5uZXJIVE1MID0gcHJvamVjdE5hbWVcclxuXHRcdG1haW5Db250YWluZXJEaXYuaW5uZXJIVE1MID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGNsYXNzPVwiaC01IHctNSBwcm9qZWN0RGVsZXRlQnV0dG9uXCJ2aWV3Qm94PVwiMCAwIDIwIDIwXCIgZmlsbD1cImN1cnJlbnRDb2xvclwiPiA8cGF0aCBmaWxsLXJ1bGU9XCJldmVub2RkXCIgZD1cIk02LjcwNyA0Ljg3OUEzIDMgMCAwMTguODI4IDRIMTVhMyAzIDAgMDEzIDN2NmEzIDMgMCAwMS0zIDNIOC44MjhhMyAzIDAgMDEtMi4xMi0uODc5bC00LjQxNS00LjQxNGExIDEgMCAwMTAtMS40MTRsNC40MTQtNC40MTR6bTQgMi40MTRhMSAxIDAgMDAtMS40MTQgMS40MTRMMTAuNTg2IDEwbC0xLjI5MyAxLjI5M2ExIDEgMCAxMDEuNDE0IDEuNDE0TDEyIDExLjQxNGwxLjI5MyAxLjI5M2ExIDEgMCAwMDEuNDE0LTEuNDE0TDEzLjQxNCAxMGwxLjI5My0xLjI5M2ExIDEgMCAwMC0xLjQxNC0xLjQxNEwxMiA4LjU4NmwtMS4yOTMtMS4yOTN6XCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIC8+IDwvc3ZnPmBcclxuXHRcdFxyXG5cdFx0cHJvamVjdHNDb250YWluZXJEaXYuYXBwZW5kQ2hpbGQobWFpbkNvbnRhaW5lckRpdilcclxuXHRcdG1haW5Db250YWluZXJEaXYucHJlcGVuZChwcm9qZWN0TmFtZURpdilcclxuXHR9XHJcblxyXG5cdGNvbnN0IHJlbmRlckFsbCA9IGZ1bmN0aW9uKHByb2plY3RBcnJheSl7XHJcblx0XHRwcm9qZWN0QXJyYXkuZm9yRWFjaChwcm9qZWN0TmFtZSA9PiByZW5kZXJTaW5nbGUocHJvamVjdE5hbWUpKVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHsgcmVuZGVyQWxsLCByZW5kZXJTaW5nbGUgfVxyXG5cclxufSkoKTtcclxuXHJcbmNvbnN0IFRhc2tzRE9NID0gKGZ1bmN0aW9uKCl7XHJcblxyXG5cdGNvbnN0IHJlbmRlclNpbmdsZSA9IGZ1bmN0aW9uKHRhc2spe1xyXG5cclxuIFx0XHRjb25zdCBjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBjb250ZW50KXtcclxuXHRcdFx0Y29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcclxuXHRcdFx0ZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSlcclxuXHJcblx0XHRcdGlmKGNvbnRlbnQgIT0gdW5kZWZpbmVkKXtcclxuXHRcdFx0XHRlbGVtZW50LmlubmVySFRNTCA9IGNvbnRlbnRcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGVsZW1lbnRcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCB0YXNrTGluZURpdmlkZXJDcmVhdG9yID0gZnVuY3Rpb24oKXtcclxuXHRcdFx0Y29uc3QgdGFza0xpbmVEaXZpZGVyRGl2ID0gY3JlYXRlRWxlbWVudChcInRhc2tMaW5lRGl2aWRlckRpdlwiKVxyXG5cdFx0XHRjb25zdCB0YXNrTGluZURpdmlkZXIgPSBjcmVhdGVFbGVtZW50KFwidGFza0xpbmVEaXZpZGVyXCIpXHJcblx0XHRcdHRhc2tMaW5lRGl2aWRlckRpdi5hcHBlbmRDaGlsZCh0YXNrTGluZURpdmlkZXIpXHJcblxyXG5cdFx0XHRyZXR1cm4gdGFza0xpbmVEaXZpZGVyRGl2XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdGNvbnN0IHByaW50ZWREYXRlID0gdGFzay5kYXRlLnNwbGl0KFwiLVwiKVxyXG5cdFx0Y29uc3QgZm9ybWF0dGVkRGF0ZSA9IGAke3ByaW50ZWREYXRlWzJdfS8ke3ByaW50ZWREYXRlWzFdfS8ke3ByaW50ZWREYXRlWzBdfWBcclxuXHRcdGNvbnN0IGN1cnJlbnREYXRlID0gZm9ybWF0KG5ldyBEYXRlLCBcInl5eXktTU0tZGRcIikuc3BsaXQoXCItXCIpXHJcblxyXG5cdFx0Y29uc3QgdGFza0NvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJ0YXNrQ29udGFpbmVyXCIpXHJcblx0XHRjb25zdCB0YXNrVGl0bGUgPSBjcmVhdGVFbGVtZW50KFwidGFza1RpdGxlXCIsIHRhc2sudGl0bGUpXHJcblx0XHRjb25zdCB0YXNrRGF0ZSA9IGNyZWF0ZUVsZW1lbnQoXCJ0YXNrRGF0ZVwiLCBmb3JtYXR0ZWREYXRlKVxyXG5cdFx0Y29uc3QgdGFza05vdGUgPSBjcmVhdGVFbGVtZW50KFwidGFza05vdGVcIiwgdGFzay5ub3RlKVxyXG5cdFx0Y29uc3QgdGFza0J1dHRvbnMgPSBjcmVhdGVFbGVtZW50KFwidGFza0J1dHRvbnNcIilcclxuXHRcdGNvbnN0IHRhc2tFZGl0ID0gY3JlYXRlRWxlbWVudChcInRhc2tFZGl0XCIpXHJcblx0XHRjb25zdCB0YXNrRGVsZXRlID0gY3JlYXRlRWxlbWVudChcInRhc2tEZWxldGVcIilcclxuXHRcdGNvbnN0IHRhc2tDb25maXJtRWRpdCA9IGNyZWF0ZUVsZW1lbnQoXCJ0YXNrQ29uZmlybUVkaXRcIilcclxuXHJcblx0XHRjb25zdCB0YXNrVGl0bGVFZGl0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpXHJcblx0XHRjb25zdCB0YXNrRGF0ZUVkaXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIikgXHJcblx0XHRjb25zdCB0YXNrTm90ZUVkaXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIilcclxuXHJcblx0XHR0YXNrVGl0bGVFZGl0LmNsYXNzTGlzdC5hZGQoXCJlZGl0VGFza1wiLCBcInRhc2tUaXRsZUVkaXRcIilcclxuXHRcdHRhc2tEYXRlRWRpdC5jbGFzc0xpc3QuYWRkKFwiZWRpdFRhc2tcIiwgXCJ0YXNrRGF0ZUVkaXRcIilcclxuXHRcdHRhc2tOb3RlRWRpdC5jbGFzc0xpc3QuYWRkKFwiZWRpdFRhc2tcIiwgXCJ0YXNrTm90ZUVkaXRcIilcclxuXHJcblx0XHR0YXNrVGl0bGVFZGl0LnNldEF0dHJpYnV0ZShcImlkXCIsIGB0aXRsZUVkaXQtJHt0YXNrLmlkfWApXHJcblx0XHR0YXNrRGF0ZUVkaXQuc2V0QXR0cmlidXRlKFwiaWRcIiwgYGRhdGVFZGl0LSR7dGFzay5pZH1gKVxyXG5cdFx0dGFza05vdGVFZGl0LnNldEF0dHJpYnV0ZShcImlkXCIsIGBub3RlRWRpdC0ke3Rhc2suaWR9YClcclxuXHJcblx0XHR0YXNrVGl0bGVFZGl0LnZhbHVlID0gdGFzay50aXRsZVxyXG5cdFx0dGFza05vdGVFZGl0LnZhbHVlID0gdGFzay5ub3RlXHJcblxyXG5cclxuXHRcdHRhc2tEYXRlRWRpdC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiZGF0ZVwiKVxyXG5cdFx0dGFza0RhdGVFZGl0LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIGAke3ByaW50ZWREYXRlWzBdfS0ke3ByaW50ZWREYXRlWzFdfS0ke3ByaW50ZWREYXRlWzJdfWApXHJcblx0XHR0YXNrRGF0ZUVkaXQuc2V0QXR0cmlidXRlKFwibWluXCIsIGAke2N1cnJlbnREYXRlWzBdfS0ke2N1cnJlbnREYXRlWzFdfS0ke2N1cnJlbnREYXRlWzJdfWApXHJcblxyXG5cdFx0dGFza0VkaXQuaW5uZXJIVE1MID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGNsYXNzPVwiaC02IHctNiB0YXNrRWRpdEJ1dHRvblwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiPjxwYXRoIGNsYXNzPVwidGFza0VkaXRCdXR0b25cIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xNS4yMzIgNS4yMzJsMy41MzYgMy41MzZtLTIuMDM2LTUuMDM2YTIuNSAyLjUgMCAxMTMuNTM2IDMuNTM2TDYuNSAyMS4wMzZIM3YtMy41NzJMMTYuNzMyIDMuNzMyelwiIC8+PC9zdmc+YFxyXG5cdFx0dGFza0RlbGV0ZS5pbm5lckhUTUwgPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgY2xhc3M9XCJoLTUgdy01IHRhc2tEZWxldGVCdXR0b25cInZpZXdCb3g9XCIwIDAgMjAgMjBcIiBmaWxsPVwiY3VycmVudENvbG9yXCI+IDxwYXRoIGNsYXNzPVwidGFza0RlbGV0ZUJ1dHRvblwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTYuNzA3IDQuODc5QTMgMyAwIDAxOC44MjggNEgxNWEzIDMgMCAwMTMgM3Y2YTMgMyAwIDAxLTMgM0g4LjgyOGEzIDMgMCAwMS0yLjEyLS44NzlsLTQuNDE1LTQuNDE0YTEgMSAwIDAxMC0xLjQxNGw0LjQxNC00LjQxNHptNCAyLjQxNGExIDEgMCAwMC0xLjQxNCAxLjQxNEwxMC41ODYgMTBsLTEuMjkzIDEuMjkzYTEgMSAwIDEwMS40MTQgMS40MTRMMTIgMTEuNDE0bDEuMjkzIDEuMjkzYTEgMSAwIDAwMS40MTQtMS40MTRMMTMuNDE0IDEwbDEuMjkzLTEuMjkzYTEgMSAwIDAwLTEuNDE0LTEuNDE0TDEyIDguNTg2bC0xLjI5My0xLjI5M3pcIiBjbGlwLXJ1bGU9XCJldmVub2RkXCIgLz4gPC9zdmc+YFxyXG5cdFx0dGFza0NvbmZpcm1FZGl0LmlubmVySFRNTCA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBjbGFzcz1cImgtNSB3LTUgdGFza0VkaXRDb25maXJtQnV0dG9uXCIgdmlld0JveD1cIjAgMCAyMCAyMFwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIj48cGF0aCBjbGFzcz1cInRhc2tFZGl0Q29uZmlybUJ1dHRvblwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTEwIDE4YTggOCAwIDEwMC0xNiA4IDggMCAwMDAgMTZ6bTMuNzA3LTkuMjkzYTEgMSAwIDAwLTEuNDE0LTEuNDE0TDkgMTAuNTg2IDcuNzA3IDkuMjkzYTEgMSAwIDAwLTEuNDE0IDEuNDE0bDIgMmExIDEgMCAwMDEuNDE0IDBsNC00elwiIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiAvPjwvc3ZnPmBcclxuXHRcdFxyXG5cdFx0aWYodGFzay5jb21wbGV0ZWQpe1xyXG5cdFx0XHR0YXNrQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJjb21wbGV0ZWRUYXNrXCIpXHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGNvbnN0IGFwcGVuZEFycmF5ID0gW1xyXG5cdFx0XHR0YXNrVGl0bGUsXHJcblx0XHRcdHRhc2tUaXRsZUVkaXQsXHJcblx0XHRcdHRhc2tMaW5lRGl2aWRlckNyZWF0b3IoKSxcclxuXHRcdFx0dGFza0RhdGUsXHJcblx0XHRcdHRhc2tEYXRlRWRpdCxcclxuXHRcdFx0dGFza0xpbmVEaXZpZGVyQ3JlYXRvcigpLFxyXG5cdFx0XHR0YXNrTm90ZSxcclxuXHRcdFx0dGFza05vdGVFZGl0LFxyXG5cdFx0XHR0YXNrTGluZURpdmlkZXJDcmVhdG9yKCksXHJcblx0XHRcdHRhc2tCdXR0b25zXHJcblx0XHRdO1xyXG5cclxuXHRcdHRhc2tzQ29udGFpbmVyRGl2LmFwcGVuZENoaWxkKHRhc2tDb250YWluZXIpXHJcblx0XHRhcHBlbmRBcnJheS5mb3JFYWNoKGRpdiA9PiB0YXNrQ29udGFpbmVyLmFwcGVuZENoaWxkKGRpdikpXHJcblx0XHRhcHBlbmRBcnJheS5mb3JFYWNoKGRpdiA9PiB7XHJcblx0XHRcdGlmKCFkaXYuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGFza0J1dHRvbnNcIikpIGRpdi5wYXJlbnROb2RlLnNldEF0dHJpYnV0ZShcImlkXCIsIHRhc2suaWQpXHJcblx0XHR9KVxyXG5cdFx0dGFza0J1dHRvbnMuYXBwZW5kQ2hpbGQodGFza0NvbmZpcm1FZGl0KVxyXG5cdFx0dGFza0J1dHRvbnMuYXBwZW5kQ2hpbGQodGFza0VkaXQpXHJcblx0XHR0YXNrQnV0dG9ucy5hcHBlbmRDaGlsZCh0YXNrRGVsZXRlKVxyXG5cclxuXHR9XHJcblxyXG5cdGNvbnN0IHJlbmRlckFycmF5ID0gZnVuY3Rpb24oYXJyYXkpe1xyXG5cdFx0YXJyYXkuZm9yRWFjaCh0YXNrID0+IHJlbmRlclNpbmdsZSh0YXNrKSlcclxuXHR9XHJcblx0XHJcblx0Y29uc3QgY2xlYXJUYXNrcyA9IGZ1bmN0aW9uKCl7XHJcblx0XHR0YXNrc0NvbnRhaW5lckRpdi5pbm5lckhUTUwgPSBcIlwiXHJcblx0fVxyXG5cclxuXHRjb25zdCBjbGVhckFuZFJlbmRlclRhc2tzID0gZnVuY3Rpb24oYXJyYXkpe1xyXG5cdFx0Y2xlYXJUYXNrcygpO1xyXG5cdFx0cmVuZGVyQXJyYXkoYXJyYXkpO1xyXG5cdH1cclxuXHJcblx0Y29uc3QgY2hhbmdlU3RhdHVzID0gZnVuY3Rpb24obm9kZSl7XHJcblx0XHRpZihub2RlLmNsYXNzTGlzdC5jb250YWlucyhcImNvbXBsZXRlZFRhc2tcIikpe1xyXG5cdFx0XHRub2RlLmNsYXNzTGlzdC5yZW1vdmUoXCJjb21wbGV0ZWRUYXNrXCIpXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRub2RlLmNsYXNzTGlzdC5hZGQoXCJjb21wbGV0ZWRUYXNrXCIpXHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRjb25zdCBjbGVhckFuZFJlbmRlcldpdGhIZWFkZXJzID0gZnVuY3Rpb24oYXJyYXkpe1xyXG5cclxuXHRcdGNsZWFyVGFza3MoKTtcclxuXHRcdGNvbnN0IHByb2plY3RzV2l0aFRhc2tzID0gW11cclxuXHRcdGFycmF5LmZvckVhY2godGFzayA9PiBwcm9qZWN0c1dpdGhUYXNrcy5wdXNoKHRhc2sucHJvamVjdCkpXHJcblx0XHRjb25zdCByZW1vdmVkRHVwbGljYXRlUHJvamVjdHMgPSBbLi4ubmV3IFNldChwcm9qZWN0c1dpdGhUYXNrcyldXHJcblxyXG5cdFx0cmVtb3ZlZER1cGxpY2F0ZVByb2plY3RzLmZvckVhY2gocHJvamVjdCA9PiB7XHJcblxyXG5cdFx0XHRjb25zdCBmaWx0ZXJlZEFycmF5ID0gYXJyYXkuZmlsdGVyKHRhc2sgPT4gdGFzay5wcm9qZWN0ID09PSBwcm9qZWN0KVxyXG5cclxuXHRcdFx0aWYocHJvamVjdCA9PT0gXCJhbGxcIikgcHJvamVjdCA9IFwidW5hbGxvY2F0ZWQgdGFza3NcIlxyXG5cclxuXHRcdFx0Y29uc3QgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG5cdFx0XHRoZWFkZXIuaW5uZXJIVE1MID0gcHJvamVjdC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb2plY3Quc2xpY2UoMSlcclxuXHRcdFx0aGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJoZWFkZXJGb3JPYmplY3RzXCIpXHJcblx0XHRcdHRhc2tzQ29udGFpbmVyRGl2LmFwcGVuZENoaWxkKGhlYWRlcilcclxuXHJcblxyXG5cclxuXHRcdFx0ZmlsdGVyZWRBcnJheS5mb3JFYWNoKHRhc2sgPT4gcmVuZGVyU2luZ2xlKHRhc2spKVxyXG5cdFx0fSlcclxuXHJcblx0fVxyXG5cclxuXHRjb25zdCB0YXNrRWRpdCA9IGZ1bmN0aW9uKG5vZGUpe1xyXG5cdFx0Y29uc3QgY2hpbGROb2RlcyA9IG5vZGUuY2hpbGRyZW5cclxuXHRcdGNvbnN0IGFycmF5RWRpdHMgPSBbIGNoaWxkTm9kZXNbMV0sIGNoaWxkTm9kZXNbNF0sIGNoaWxkTm9kZXNbN11dXHJcblx0XHRjb25zdCBzdGF0aWNUYXNrSW5mbyA9IFsgY2hpbGROb2Rlc1swXSwgY2hpbGROb2Rlc1szXSwgY2hpbGROb2Rlc1s2XV1cclxuXHJcblx0XHRjaGlsZE5vZGVzWzldLmNoaWxkcmVuWzBdLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIlxyXG5cdFx0Y2hpbGROb2Rlc1s5XS5jaGlsZHJlblsxXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCJcclxuXHRcdGFycmF5RWRpdHMuZm9yRWFjaChlZGl0SW5wdXQgPT4gZWRpdElucHV0LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCIpXHJcblx0XHRzdGF0aWNUYXNrSW5mby5mb3JFYWNoKHN0YXRpY05vZGUgPT4gc3RhdGljTm9kZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCIpXHJcblx0fVxyXG5cclxuXHRjb25zdCB0YXNrRWRpdFZhbHVlcyA9IGZ1bmN0aW9uKG5vZGUsIHZhbHVlcyl7XHJcblx0XHRub2RlLmNoaWxkcmVuWzBdLmlubmVySFRNTCA9IHZhbHVlc1swXVxyXG5cclxuXHRcdGNvbnN0IHNwbGl0RGF0ZSA9IHZhbHVlc1sxXS5zcGxpdChcIi1cIilcclxuXHRcdG5vZGUuY2hpbGRyZW5bM10uaW5uZXJIVE1MID0gYCR7c3BsaXREYXRlWzJdfS8ke3NwbGl0RGF0ZVsxXX0vJHtzcGxpdERhdGVbMF19YFxyXG5cdFx0bm9kZS5jaGlsZHJlbls2XS5pbm5lckhUTUwgPSB2YWx1ZXNbMl1cclxuXHR9XHJcblxyXG5cdGNvbnN0IHRhc2tFZGl0Q29uZmlybSA9IGZ1bmN0aW9uKG5vZGUpe1xyXG5cdFx0Y29uc3QgY2hpbGROb2RlcyA9IG5vZGUuY2hpbGRyZW5cclxuXHRcdGNvbnN0IGFycmF5RWRpdHMgPSBbIGNoaWxkTm9kZXNbMV0sIGNoaWxkTm9kZXNbNF0sIGNoaWxkTm9kZXNbN11dXHJcblx0XHRjb25zdCBzdGF0aWNUYXNrSW5mbyA9IFsgY2hpbGROb2Rlc1swXSwgY2hpbGROb2Rlc1szXSwgY2hpbGROb2Rlc1s2XV1cclxuXHJcblx0XHRjaGlsZE5vZGVzWzldLmNoaWxkcmVuWzBdLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxyXG5cdFx0Y2hpbGROb2Rlc1s5XS5jaGlsZHJlblsxXS5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCJcclxuXHRcdGFycmF5RWRpdHMuZm9yRWFjaChlZGl0SW5wdXQgPT4gZWRpdElucHV0LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIilcclxuXHRcdHN0YXRpY1Rhc2tJbmZvLmZvckVhY2goc3RhdGljTm9kZSA9PiBzdGF0aWNOb2RlLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIilcclxuXHR9XHJcblxyXG5cdHJldHVybiB7IHJlbmRlclNpbmdsZSwgcmVuZGVyQXJyYXksIGNsZWFyVGFza3MsIGNsZWFyQW5kUmVuZGVyVGFza3MsIGNoYW5nZVN0YXR1cywgY2xlYXJBbmRSZW5kZXJXaXRoSGVhZGVycywgdGFza0VkaXQsIHRhc2tFZGl0Q29uZmlybSwgdGFza0VkaXRWYWx1ZXMgfVxyXG5cclxufSkoKTtcclxuXHJcbmNvbnN0IFN0eWxlRE9NID0gKGZ1bmN0aW9uKCl7XHJcblxyXG5cdGNvbnN0IHJlc2V0Q3VycmVudGx5U2VsZWN0ZWQgPSBmdW5jdGlvbigpe1xyXG5cdFx0Y29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzZXRfU3R5bGVcIik7XHJcblx0XHRlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjdXJyZW50bHlTZWxlY3RlZFwiLCBcImN1cnJlbnRseVNlbGVjdGVkRm9udENvbG91clwiKVxyXG5cdH1cclxuXHJcblx0Y29uc3QgYWRkQ3VycmVudGx5U2VsZWN0ZWQgPSBmdW5jdGlvbihlbGVtZW50KXtcclxuXHRcdGNvbnN0IG5vZGVMZW5ndGggPSBlbGVtZW50LnBhcmVudE5vZGUuY2hpbGRyZW4ubGVuZ3RoXHJcblx0XHRyZW1vdmVDdXJyZW50bHlTZWxlY3RlZChlbGVtZW50KTtcclxuXHJcblx0XHRlbGVtZW50LnBhcmVudE5vZGUuY2hpbGRyZW5bMF0uY2xhc3NMaXN0LmFkZChcImN1cnJlbnRseVNlbGVjdGVkRm9udENvbG91clwiKVxyXG5cdFx0Zm9yKGxldCBpPTA7IGk8bm9kZUxlbmd0aDsgaSsrKXtcclxuXHRcdFx0ZWxlbWVudC5wYXJlbnROb2RlLmNoaWxkcmVuW2ldLmNsYXNzTGlzdC5hZGQoXCJjdXJyZW50bHlTZWxlY3RlZFwiKVxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGNvbnN0IHJlbW92ZUN1cnJlbnRseVNlbGVjdGVkID0gZnVuY3Rpb24oKXtcclxuXHRcdGNvbnN0IHByb2plY3RzTGVuZ3RoID0gcHJvamVjdHNDb250YWluZXJEaXYuY2hpbGRyZW4ubGVuZ3RoXHJcblxyXG5cdFx0Zm9yKGxldCBpPTA7IGk8cHJvamVjdHNMZW5ndGg7IGkrKyl7XHJcblx0XHRcdHByb2plY3RzQ29udGFpbmVyRGl2LmNoaWxkcmVuW2ldLmNoaWxkcmVuWzBdLmNsYXNzTGlzdC5yZW1vdmUoXCJjdXJyZW50bHlTZWxlY3RlZFwiKVxyXG5cdFx0XHRwcm9qZWN0c0NvbnRhaW5lckRpdi5jaGlsZHJlbltpXS5jaGlsZHJlblswXS5jbGFzc0xpc3QucmVtb3ZlKFwiY3VycmVudGx5U2VsZWN0ZWRGb250Q29sb3VyXCIpXHJcblx0XHRcdGlmKHByb2plY3RzQ29udGFpbmVyRGl2LmNoaWxkcmVuW2ldLmNoaWxkcmVuWzFdICE9IHVuZGVmaW5lZCl7XHJcblx0XHRcdFx0cHJvamVjdHNDb250YWluZXJEaXYuY2hpbGRyZW5baV0uY2hpbGRyZW5bMV0uY2xhc3NMaXN0LnJlbW92ZShcImN1cnJlbnRseVNlbGVjdGVkXCIpXHJcblx0XHRcdFx0cHJvamVjdHNDb250YWluZXJEaXYuY2hpbGRyZW5baV0uY2hpbGRyZW5bMV0uY2xhc3NMaXN0LnJlbW92ZShcImN1cnJlbnRseVNlbGVjdGVkRm9udENvbG91clwiKVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cclxuXHR9XHJcblxyXG5cdGNvbnN0IHJlbW92ZURlbGV0ZUNvbmZpcm1Nb2RhbCA9IGZ1bmN0aW9uKCl7XHJcblx0XHRwcm9qZWN0RGVsZXRlTW9kYWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXHJcblx0fVxyXG5cclxuXHRyZXR1cm4geyBhZGRDdXJyZW50bHlTZWxlY3RlZCwgcmVtb3ZlQ3VycmVudGx5U2VsZWN0ZWQsIHJlc2V0Q3VycmVudGx5U2VsZWN0ZWQsIHJlbW92ZURlbGV0ZUNvbmZpcm1Nb2RhbH1cclxuXHJcbn0pKCk7XHJcblxyXG5jb25zdCB3aG9sZUFwcCA9IChmdW5jdGlvbigpe1xyXG5cclxuXHRjb25zdCBwYWdlVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmhlYWRlcl9fcHJvamVjdFRpdGxlXCIpXHJcblx0Y29uc3QgZGF0ZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkYXRlSW5wdXRcIilcclxuXHJcblx0Y29uc3QgY2hhbmdlVGl0bGUgPSBmdW5jdGlvbih0aXRsZSl7XHJcblx0XHRwYWdlVGl0bGUuaW5uZXJIVE1MID0gdGl0bGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0aXRsZS5zbGljZSgxKTtcclxuXHR9XHJcblxyXG5cdGNvbnN0IHNldERhdGVJbnB1dFBhcmFtZXRlcnMgPSBmdW5jdGlvbigpe1xyXG5cdFx0Y29uc3QgZGF0ZSA9IGZvcm1hdChuZXcgRGF0ZSwgXCJ5eXl5LU1NLWRkXCIpLnNwbGl0KFwiLVwiKVxyXG5cdFx0ZGF0ZUlucHV0LnNldEF0dHJpYnV0ZShcIm1pblwiLCBgJHtkYXRlWzBdfS0ke2RhdGVbMV19LSR7ZGF0ZVsyXX1gKVxyXG5cdFx0ZGF0ZUlucHV0LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIGAke2RhdGVbMF19LSR7ZGF0ZVsxXX0tJHtkYXRlWzJdfWApXHJcblx0fVxyXG5cclxuXHRjb25zdCBjdXJyZW50RGF0ZSA9IGZ1bmN0aW9uKCl7XHJcblx0XHRjb25zdCBjdXJyZW50RGF0ZSA9IGZvcm1hdChuZXcgRGF0ZSwgXCJ5eXl5LU1NLWRkXCIpXHJcblx0XHRyZXR1cm4gY3VycmVudERhdGVcclxuXHR9XHJcblxyXG5cdHJldHVybiB7IGNoYW5nZVRpdGxlLCBzZXREYXRlSW5wdXRQYXJhbWV0ZXJzLCBjdXJyZW50RGF0ZSB9XHJcblxyXG59KSgpO1xyXG5cclxuZXhwb3J0IHsgUHJvamVjdHNET00sIFRhc2tzRE9NLCBTdHlsZURPTSwgd2hvbGVBcHAgfVxyXG4iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzQmVmb3JlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBmaXJzdCBkYXRlIGJlZm9yZSB0aGUgc2Vjb25kIG9uZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBmaXJzdCBkYXRlIGJlZm9yZSB0aGUgc2Vjb25kIG9uZT9cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0aGF0IHNob3VsZCBiZSBiZWZvcmUgdGhlIG90aGVyIG9uZSB0byByZXR1cm4gdHJ1ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVRvQ29tcGFyZSAtIHRoZSBkYXRlIHRvIGNvbXBhcmUgd2l0aFxuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBmaXJzdCBkYXRlIGlzIGJlZm9yZSB0aGUgc2Vjb25kIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSXMgMTAgSnVseSAxOTg5IGJlZm9yZSAxMSBGZWJydWFyeSAxOTg3P1xuICogdmFyIHJlc3VsdCA9IGlzQmVmb3JlKG5ldyBEYXRlKDE5ODksIDYsIDEwKSwgbmV3IERhdGUoMTk4NywgMSwgMTEpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQmVmb3JlKGRpcnR5RGF0ZSwgZGlydHlEYXRlVG9Db21wYXJlKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF0ZVRvQ29tcGFyZSA9IHRvRGF0ZShkaXJ0eURhdGVUb0NvbXBhcmUpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgPCBkYXRlVG9Db21wYXJlLmdldFRpbWUoKTtcbn0iLCJpbXBvcnQgeyBmb3JtYXQsIGlzQmVmb3JlIH0gZnJvbSBcImRhdGUtZm5zXCI7XHJcblxyXG5jb25zdCBJbnB1dCA9IChmdW5jdGlvbigpe1xyXG5cclxuXHRjb25zdCBzdWJtaXRQcm9qZWN0QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdWJtaXRQcm9qZWN0QnV0dG9uXCIpXHJcblx0Y29uc3QgYWxsUHJvamVjdHNDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW5Db250YWluZXJfX3Byb2plY3RMaXN0RGl2X19wcm9qZWN0TGlzdFwiKVxyXG5cdGNvbnN0IGFsbFRhc2tzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tYWluQ29udGFpbmVyX190YXNrTGlzdERpdl9fY29udGFpbmVyXCIpXHJcblx0Y29uc3Qgc3VibWl0VGFza0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGFza1N1Ym1pdFwiKVxyXG5cdGNvbnN0IHByb2plY3REZWxldGVNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29uZmlybURlbGV0ZVByb2plY3RNb2RhbFwiKVxyXG5cclxuXHRjb25zdCBuZXdQcm9qZWN0ID0gZnVuY3Rpb24ocGFzc3Rocm91Z2gpe1xyXG5cdFx0c3VibWl0UHJvamVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XHJcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0cGFzc3Rocm91Z2goKTtcclxuXHRcdH0pXHJcblx0fVxyXG5cclxuXHRjb25zdCBjaG9vc2VQcm9qZWN0ID0gZnVuY3Rpb24ocGFzc3Rocm91Z2gpe1xyXG5cdFx0YWxsUHJvamVjdHNDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpe1xyXG5cdFx0XHRpZihlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJwcm9qZWN0TmFtZVwiKSl7XHJcblx0XHRcdFx0cGFzc3Rocm91Z2goZSlcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHR9XHJcblxyXG5cdGNvbnN0IGRlbGV0ZVByb2plY3QgPSBmdW5jdGlvbihwYXNzdGhyb3VnaCl7XHJcblx0XHRhbGxQcm9qZWN0c0NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XHJcblx0XHRcdGlmKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInByb2plY3REZWxldGVCdXR0b25cIikgfHwgXHQoZS50YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoXCJwcm9qZWN0RGVsZXRlQnV0dG9uXCIpKSl7XHJcblx0XHRcdFx0cGFzc3Rocm91Z2goZSlcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHR9XHJcblxyXG5cdGNvbnN0IG5ld1Rhc2sgPSBmdW5jdGlvbihwYXNzdGhyb3VnaCl7XHJcblx0XHRzdWJtaXRUYXNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKXtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRwYXNzdGhyb3VnaCgpXHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0Y29uc3QgdGFza0VkaXREZWxldGUgPSBmdW5jdGlvbihwYXNzdGhyb3VnaCl7XHJcblx0XHRhbGxUYXNrc0NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XHJcblx0XHRcdHBhc3N0aHJvdWdoKGUpXHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0Y29uc3QgY29uZmlybURlbGV0ZSA9IGZ1bmN0aW9uKHBhc3N0aHJvdWdoKXtcclxuXHRcdHByb2plY3REZWxldGVNb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCJcclxuXHRcdHByb2plY3REZWxldGVNb2RhbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSl7XHJcblx0XHRcdHBhc3N0aHJvdWdoKGUpXHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHsgbmV3UHJvamVjdCwgY2hvb3NlUHJvamVjdCwgZGVsZXRlUHJvamVjdCwgbmV3VGFzaywgdGFza0VkaXREZWxldGUsIGNvbmZpcm1EZWxldGUgfVxyXG5cclxufSkoKTtcclxuXHJcbmNvbnN0IEdldElucHV0ID0gKGZ1bmN0aW9uKCl7XHJcblxyXG5cdGNvbnN0IHByb2plY3RGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9qZWN0SW5wdXRcIilcclxuXHJcblx0Y29uc3QgZm9ybUNoZWNrID0gZnVuY3Rpb24odGl0bGUsIGRhdGUsIG5vdGUgKXtcclxuXHJcblx0XHRjb25zdCB0b2RheXNEYXRlID0gZm9ybWF0KG5ldyBEYXRlLCBcInl5eXktTU0tZGRcIikuc3BsaXQoXCItXCIpXHJcblx0XHRjb25zdCBpbnB1dHRlZERhdGUgPSBkYXRlLnZhbHVlLnNwbGl0KFwiLVwiKVxyXG5cdFx0Y29uc3QgYmVmb3JlQ2hlY2sgPSBpc0JlZm9yZShuZXcgRGF0ZShpbnB1dHRlZERhdGVbMF0sIGlucHV0dGVkRGF0ZVsxXSwgaW5wdXR0ZWREYXRlWzJdKSwgbmV3IERhdGUodG9kYXlzRGF0ZVswXSwgdG9kYXlzRGF0ZVsxXSwgdG9kYXlzRGF0ZVsyXSkpXHJcblxyXG5cdFx0bGV0IG1pc3NlZElucHV0cyA9IDBcclxuXHJcblx0XHRpZih0aXRsZS52YWx1ZSA9PT0gXCJcIil7XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiZml4IHRpdGxlXCIpXHJcblx0XHRcdG1pc3NlZElucHV0cysrXHJcblx0XHR9XHJcblxyXG5cdFx0aWYobm90ZS52YWx1ZSA9PT0gXCJcIil7XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiZml4IG5vdGVcIilcclxuXHRcdFx0bWlzc2VkSW5wdXRzKytcclxuXHRcdH1cclxuXHJcblx0XHRpZihiZWZvcmVDaGVjayl7XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiVGhlIGRhdGUgaXMgYmVmb3JlXCIpXHJcblx0XHRcdG1pc3NlZElucHV0cysrXHJcblx0XHR9XHJcblxyXG5cdFx0aWYobWlzc2VkSW5wdXRzID4gMCl7XHJcblx0XHRcdHJldHVybiBudWxsXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIFt0aXRsZS52YWx1ZSwgZGF0ZS52YWx1ZSwgbm90ZS52YWx1ZV1cclxuXHR9XHJcblxyXG5cdGNvbnN0IHByb2plY3ROYW1lID0gZnVuY3Rpb24oKXtcclxuXHRcdGNvbnN0IHZhbHVlVG9SZXR1cm4gPSBwcm9qZWN0Rm9ybS52YWx1ZS50b0xvd2VyQ2FzZSgpXHJcblx0XHRwcm9qZWN0Rm9ybS52YWx1ZSA9IFwiXCJcclxuXHRcdHJldHVybiB2YWx1ZVRvUmV0dXJuXHJcblx0fVxyXG5cclxuXHRjb25zdCBmb3JtID0gZnVuY3Rpb24oKXtcclxuXHJcblx0XHRjb25zdCB0aXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGl0bGVJbnB1dFwiKVxyXG5cdFx0Y29uc3QgZGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGF0ZUlucHV0XCIpXHJcblx0XHRjb25zdCBub3RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJub3RlSW5wdXRcIilcclxuXHJcblx0XHRjb25zdCB0b2RheXNEYXRlID0gZm9ybWF0KG5ldyBEYXRlLCBcInl5eXktTU0tZGRcIikuc3BsaXQoXCItXCIpXHJcblxyXG5cdFx0Y29uc3QgdmFsdWVzID0gZm9ybUNoZWNrKHRpdGxlLCBkYXRlLCBub3RlKVxyXG5cclxuXHRcdHRpdGxlLnZhbHVlXHQ9IFwiXCJcclxuXHRcdGRhdGUudmFsdWUgPSBgJHt0b2RheXNEYXRlWzBdfS0ke3RvZGF5c0RhdGVbMV19LSR7dG9kYXlzRGF0ZVsyXX1gXHJcblx0XHRub3RlLnZhbHVlID0gXCJcIlxyXG5cclxuXHRcdHJldHVybiB2YWx1ZXNcclxuXHJcblx0fVxyXG5cclxuXHRjb25zdCB0YXNrRWRpdCA9IGZ1bmN0aW9uKG5vZGUpe1xyXG5cdFx0Y29uc3QgY2xpY2tlZElEID0gbm9kZS5pZFxyXG5cdFx0Y29uc3QgdGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgdGl0bGVFZGl0LSR7Y2xpY2tlZElEfWApXHJcblx0XHRjb25zdCBkYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIGBkYXRlRWRpdC0ke2NsaWNrZWRJRH1gKVxyXG5cdFx0Y29uc3Qgbm90ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBub3RlRWRpdC0ke2NsaWNrZWRJRH1gKVxyXG5cclxuXHRcdGNvbnN0IHZhbHVlcyA9IGZvcm1DaGVjayh0aXRsZSwgZGF0ZSwgbm90ZSlcclxuXHJcblx0XHRyZXR1cm4gdmFsdWVzXHJcblx0fVxyXG5cclxuXHRyZXR1cm4geyBwcm9qZWN0TmFtZSwgZm9ybSwgdGFza0VkaXQgfVxyXG5cclxufSkoKTtcclxuXHJcbmV4cG9ydCB7IElucHV0LCBHZXRJbnB1dCB9IiwiY29uc3QgU3RvcmFnZSA9IChmdW5jdGlvbiAoKSB7XHJcblxyXG5cdC8vTG9jYWwgc3RvcmFnZSB2YXJpYWJsZXNcclxuXHRsZXQgdGFza0FycmF5S2V5ID0gXCJMT0NBTF9TVE9SQUdFX0NVUlJFTlRfVEFTS1NcIjtcclxuXHRsZXQgcHJvamVjdEFycmF5S2V5ID0gXCJMT0NBTF9TVE9SQUdFX0NVUlJFTlRfUFJPSkVDVFNcIjtcclxuXHRsZXQgcHJvamVjdEN1cnJlbnRLZXkgPSBcIkxPQ0FMX1NUT1JBR0VfQ1VSUkVOVExZX1NFTEVDX1BST0pFQ1RcIjtcclxuXHJcblx0Ly9TYXZpbmcgYW5kIGxvYWRpbmcgZnVuY3Rpb25zXHJcblx0Ly8gLS0gU0FWSU5HIC0tIC8vXHJcblxyXG5cdGNvbnN0IHNhdmVQcm9qZWN0cyA9IGZ1bmN0aW9uIChwcm9qZWN0QXJyYXkpIHtcclxuXHRcdGNvbnN0IHN0cmluZ2lmaWVkSnNvbiA9IEpTT04uc3RyaW5naWZ5KHByb2plY3RBcnJheSk7XHJcblx0XHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShwcm9qZWN0QXJyYXlLZXksIHN0cmluZ2lmaWVkSnNvbik7XHJcblx0fTtcclxuXHJcblx0Y29uc3Qgc2F2ZVRhc2tzID0gZnVuY3Rpb24gKHRhc2tBcnJheSkge1xyXG5cdFx0Y29uc3Qgc3RyaW5naWZpZWRKc29uID0gSlNPTi5zdHJpbmdpZnkodGFza0FycmF5KTtcclxuXHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRhc2tBcnJheUtleSwgc3RyaW5naWZpZWRKc29uKTtcclxuXHR9O1xyXG5cclxuXHRjb25zdCBzYXZlU3RhcnJlZFByb2plY3QgPSBmdW5jdGlvbihwcm9qZWN0TmFtZSl7XHJcblx0XHRjb25zdCBzdHJpbmdpZmllZEpzb24gPSBKU09OLnN0cmluZ2lmeShwcm9qZWN0TmFtZSlcclxuXHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKHByb2plY3RDdXJyZW50S2V5LCBzdHJpbmdpZmllZEpzb24pXHJcblx0fVxyXG5cclxuXHQvLyAtLSBMT0FESU5HIC0tIC8vXHJcblxyXG5cdGNvbnN0IGxvYWRQcm9qZWN0cyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb2plY3RBcnJheUtleSkpO1xyXG5cdH07XHJcblxyXG5cdGNvbnN0IGxvYWRUYXNrcyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRhc2tBcnJheUtleSkpO1xyXG5cdH07XHJcblxyXG5cdGNvbnN0IGxvYWRTdGFycmVkUHJvamVjdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0ocHJvamVjdEN1cnJlbnRLZXkpKVxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHsgXHJcbiAgICAgICAgICAgIHNhdmVQcm9qZWN0cyxcclxuICAgICAgICAgICAgc2F2ZVRhc2tzLFxyXG5cdFx0XHRzYXZlU3RhcnJlZFByb2plY3QsXHJcbiAgICAgICAgICAgIGxvYWRQcm9qZWN0cywgXHJcbiAgICAgICAgICAgIGxvYWRUYXNrcyxcclxuXHRcdFx0bG9hZFN0YXJyZWRQcm9qZWN0XHJcbiAgICAgICAgICAgIH07XHJcblxyXG59KSgpO1xyXG5cclxuZXhwb3J0IHsgU3RvcmFnZSB9IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIGRheXMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSAtIHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBkYXlzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IC0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDEwIGRheXMgdG8gMSBTZXB0ZW1iZXIgMjAxNDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZERheXMobmV3IERhdGUoMjAxNCwgOCwgMSksIDEwKVxuICogLy89PiBUaHUgU2VwIDExIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGREYXlzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuXG4gIGlmIChpc05hTihhbW91bnQpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cblxuICBpZiAoIWFtb3VudCkge1xuICAgIC8vIElmIDAgZGF5cywgbm8tb3AgdG8gYXZvaWQgY2hhbmdpbmcgdGltZXMgaW4gdGhlIGhvdXIgYmVmb3JlIGVuZCBvZiBEU1RcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuXG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIGFtb3VudCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGFkZE1vbnRoc1xuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtb250aHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbW9udGhzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1vbnRocyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtb250aHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDUgbW9udGhzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBhZGRNb250aHMobmV3IERhdGUoMjAxNCwgOCwgMSksIDUpXG4gKiAvLz0+IFN1biBGZWIgMDEgMjAxNSAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1vbnRocyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcblxuICBpZiAoaXNOYU4oYW1vdW50KSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgaWYgKCFhbW91bnQpIHtcbiAgICAvLyBJZiAwIG1vbnRocywgbm8tb3AgdG8gYXZvaWQgY2hhbmdpbmcgdGltZXMgaW4gdGhlIGhvdXIgYmVmb3JlIGVuZCBvZiBEU1RcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuXG4gIHZhciBkYXlPZk1vbnRoID0gZGF0ZS5nZXREYXRlKCk7IC8vIFRoZSBKUyBEYXRlIG9iamVjdCBzdXBwb3J0cyBkYXRlIG1hdGggYnkgYWNjZXB0aW5nIG91dC1vZi1ib3VuZHMgdmFsdWVzIGZvclxuICAvLyBtb250aCwgZGF5LCBldGMuIEZvciBleGFtcGxlLCBuZXcgRGF0ZSgyMDIwLCAwLCAwKSByZXR1cm5zIDMxIERlYyAyMDE5IGFuZFxuICAvLyBuZXcgRGF0ZSgyMDIwLCAxMywgMSkgcmV0dXJucyAxIEZlYiAyMDIxLiAgVGhpcyBpcyAqYWxtb3N0KiB0aGUgYmVoYXZpb3Igd2VcbiAgLy8gd2FudCBleGNlcHQgdGhhdCBkYXRlcyB3aWxsIHdyYXAgYXJvdW5kIHRoZSBlbmQgb2YgYSBtb250aCwgbWVhbmluZyB0aGF0XG4gIC8vIG5ldyBEYXRlKDIwMjAsIDEzLCAzMSkgd2lsbCByZXR1cm4gMyBNYXIgMjAyMSBub3QgMjggRmViIDIwMjEgYXMgZGVzaXJlZC4gU29cbiAgLy8gd2UnbGwgZGVmYXVsdCB0byB0aGUgZW5kIG9mIHRoZSBkZXNpcmVkIG1vbnRoIGJ5IGFkZGluZyAxIHRvIHRoZSBkZXNpcmVkXG4gIC8vIG1vbnRoIGFuZCB1c2luZyBhIGRhdGUgb2YgMCB0byBiYWNrIHVwIG9uZSBkYXkgdG8gdGhlIGVuZCBvZiB0aGUgZGVzaXJlZFxuICAvLyBtb250aC5cblxuICB2YXIgZW5kT2ZEZXNpcmVkTW9udGggPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gIGVuZE9mRGVzaXJlZE1vbnRoLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIGFtb3VudCArIDEsIDApO1xuICB2YXIgZGF5c0luTW9udGggPSBlbmRPZkRlc2lyZWRNb250aC5nZXREYXRlKCk7XG5cbiAgaWYgKGRheU9mTW9udGggPj0gZGF5c0luTW9udGgpIHtcbiAgICAvLyBJZiB3ZSdyZSBhbHJlYWR5IGF0IHRoZSBlbmQgb2YgdGhlIG1vbnRoLCB0aGVuIHRoaXMgaXMgdGhlIGNvcnJlY3QgZGF0ZVxuICAgIC8vIGFuZCB3ZSdyZSBkb25lLlxuICAgIHJldHVybiBlbmRPZkRlc2lyZWRNb250aDtcbiAgfSBlbHNlIHtcbiAgICAvLyBPdGhlcndpc2UsIHdlIG5vdyBrbm93IHRoYXQgc2V0dGluZyB0aGUgb3JpZ2luYWwgZGF5LW9mLW1vbnRoIHZhbHVlIHdvbid0XG4gICAgLy8gY2F1c2UgYW4gb3ZlcmZsb3csIHNvIHNldCB0aGUgZGVzaXJlZCBkYXktb2YtbW9udGguIE5vdGUgdGhhdCB3ZSBjYW4ndFxuICAgIC8vIGp1c3Qgc2V0IHRoZSBkYXRlIG9mIGBlbmRPZkRlc2lyZWRNb250aGAgYmVjYXVzZSB0aGF0IG9iamVjdCBtYXkgaGF2ZSBoYWRcbiAgICAvLyBpdHMgdGltZSBjaGFuZ2VkIGluIHRoZSB1bnVzdWFsIGNhc2Ugd2hlcmUgd2hlcmUgYSBEU1QgdHJhbnNpdGlvbiB3YXMgb25cbiAgICAvLyB0aGUgbGFzdCBkYXkgb2YgdGhlIG1vbnRoIGFuZCBpdHMgbG9jYWwgdGltZSB3YXMgaW4gdGhlIGhvdXIgc2tpcHBlZCBvclxuICAgIC8vIHJlcGVhdGVkIG5leHQgdG8gYSBEU1QgdHJhbnNpdGlvbi4gIFNvIHdlIHVzZSBgZGF0ZWAgaW5zdGVhZCB3aGljaCBpc1xuICAgIC8vIGd1YXJhbnRlZWQgdG8gc3RpbGwgaGF2ZSB0aGUgb3JpZ2luYWwgdGltZS5cbiAgICBkYXRlLnNldEZ1bGxZZWFyKGVuZE9mRGVzaXJlZE1vbnRoLmdldEZ1bGxZZWFyKCksIGVuZE9mRGVzaXJlZE1vbnRoLmdldE1vbnRoKCksIGRheU9mTW9udGgpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG59IiwiaW1wb3J0IHsgZm9ybWF0LCBhZGQsIGlzQmVmb3JlIH0gZnJvbSBcImRhdGUtZm5zXCI7XHJcblxyXG5jb25zdCBmaWx0ZXIgPSAoZnVuY3Rpb24gKCkge1xyXG5cdGNvbnN0IGN1cnJlbnREYXRlQXJyYXkgPSBmb3JtYXQobmV3IERhdGUoKSwgXCJ5eXl5LU1NLWRkXCIpO1xyXG5cdGNvbnN0IGZvcm1hdFRvRm5zID0gZnVuY3Rpb24gKHN0b3JlZERhdGUpIHtcclxuXHRcdHJldHVybiBzdG9yZWREYXRlO1xyXG5cdH07XHJcblxyXG5cdGNvbnN0IGJ5UHJvamVjdCA9IGZ1bmN0aW9uIChhcnJheSwgcHJvamVjdE5hbWUpIHtcclxuXHRcdGxldCBmaWx0ZXJlZExpc3QgPSBhcnJheS5maWx0ZXIoKHRhc2spID0+IHRhc2sucHJvamVjdCA9PT0gcHJvamVjdE5hbWUpO1xyXG5cdFx0cmV0dXJuIGZpbHRlcmVkTGlzdDtcclxuXHR9O1xyXG5cclxuXHRjb25zdCBieVByZXNldCA9IGZ1bmN0aW9uIChhcnJheSwgZGF0ZSkge1xyXG5cdFx0aWYgKGRhdGUgPT09IFwidG9kYXlcIikge1xyXG5cdFx0XHRjb25zdCBmaWx0ZXJlZEFycmF5ID0gYXJyYXkuZmlsdGVyKCh0YXNrKSA9PiB7XHJcblx0XHRcdFx0cmV0dXJuIGZvcm1hdFRvRm5zKHRhc2suZGF0ZSkgPT09IGN1cnJlbnREYXRlQXJyYXk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRyZXR1cm4gZmlsdGVyZWRBcnJheTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoZGF0ZSA9PT0gXCJ0aGlzIHdlZWtcIikge1xyXG5cdFx0XHRjb25zdCBlbmRPZldlZWtEYXRlID0gZm9ybWF0KFxyXG5cdFx0XHRcdGFkZChuZXcgRGF0ZSgpLCB7XHJcblx0XHRcdFx0XHRkYXlzOiA3LFxyXG5cdFx0XHRcdH0pLFxyXG5cdFx0XHRcdFwieXl5eS1NTS1kZFwiXHJcblx0XHRcdCkuc3BsaXQoXCItXCIpO1xyXG5cclxuXHRcdFx0Y29uc3QgYmVmb3JlRW5kT2ZXZWVrID0gYXJyYXkuZmlsdGVyKCh0YXNrKSA9PiB7XHJcblx0XHRcdFx0Y29uc3QgdGFza0RhdGVBcnJheSA9IHRhc2suZGF0ZS5zcGxpdChcIi1cIik7XHJcblx0XHRcdFx0cmV0dXJuIGlzQmVmb3JlKFxyXG5cdFx0XHRcdFx0bmV3IERhdGUoXHJcblx0XHRcdFx0XHRcdHRhc2tEYXRlQXJyYXlbMF0sXHJcblx0XHRcdFx0XHRcdHRhc2tEYXRlQXJyYXlbMV0sXHJcblx0XHRcdFx0XHRcdHRhc2tEYXRlQXJyYXlbMl1cclxuXHRcdFx0XHRcdCksXHJcblx0XHRcdFx0XHRuZXcgRGF0ZShcclxuXHRcdFx0XHRcdFx0ZW5kT2ZXZWVrRGF0ZVswXSxcclxuXHRcdFx0XHRcdFx0ZW5kT2ZXZWVrRGF0ZVsxXSxcclxuXHRcdFx0XHRcdFx0ZW5kT2ZXZWVrRGF0ZVsyXVxyXG5cdFx0XHRcdFx0KVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0cmV0dXJuIGJlZm9yZUVuZE9mV2VlaztcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRyZXR1cm4geyBieVByb2plY3QsIGJ5UHJlc2V0IH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgeyBmaWx0ZXIgfTtcclxuIiwiaW1wb3J0IGFkZERheXMgZnJvbSBcIi4uL2FkZERheXMvaW5kZXguanNcIjtcbmltcG9ydCBhZGRNb250aHMgZnJvbSBcIi4uL2FkZE1vbnRocy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcblxuLyoqXG4gKiBAbmFtZSBhZGRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgeWVhcnMsIG1vbnRocywgd2Vla3MsIGRheXMsIGhvdXJzLCBtaW51dGVzIGFuZCBzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgeWVhcnMsIG1vbnRocywgd2Vla3MsIGRheXMsIGhvdXJzLCBtaW51dGVzIGFuZCBzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge0R1cmF0aW9ufSBkdXJhdGlvbiAtIHRoZSBvYmplY3Qgd2l0aCB5ZWFycywgbW9udGhzLCB3ZWVrcywgZGF5cywgaG91cnMsIG1pbnV0ZXMgYW5kIHNlY29uZHMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqXG4gKiB8IEtleSAgICAgICAgICAgIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IHllYXJzICAgICAgICAgIHwgQW1vdW50IG9mIHllYXJzIHRvIGJlIGFkZGVkICAgICAgICB8XG4gKiB8IG1vbnRocyAgICAgICAgIHwgQW1vdW50IG9mIG1vbnRocyB0byBiZSBhZGRlZCAgICAgICB8XG4gKiB8IHdlZWtzICAgICAgICAgIHwgQW1vdW50IG9mIHdlZWtzIHRvIGJlIGFkZGVkICAgICAgICB8XG4gKiB8IGRheXMgICAgICAgICAgIHwgQW1vdW50IG9mIGRheXMgdG8gYmUgYWRkZWQgICAgICAgICB8XG4gKiB8IGhvdXJzICAgICAgICAgIHwgQW1vdW50IG9mIGhvdXJzIHRvIGJlIGFkZGVkICAgICAgICB8XG4gKiB8IG1pbnV0ZXMgICAgICAgIHwgQW1vdW50IG9mIG1pbnV0ZXMgdG8gYmUgYWRkZWQgICAgICB8XG4gKiB8IHNlY29uZHMgICAgICAgIHwgQW1vdW50IG9mIHNlY29uZHMgdG8gYmUgYWRkZWQgICAgICB8XG4gKlxuICogQWxsIHZhbHVlcyBkZWZhdWx0IHRvIDBcbiAqXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIHNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIHRoZSBmb2xsb3dpbmcgZHVyYXRpb24gdG8gMSBTZXB0ZW1iZXIgMjAxNCwgMTA6MTk6NTBcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZChuZXcgRGF0ZSgyMDE0LCA4LCAxLCAxMCwgMTksIDUwKSwge1xuICogICB5ZWFyczogMixcbiAqICAgbW9udGhzOiA5LFxuICogICB3ZWVrczogMSxcbiAqICAgZGF5czogNyxcbiAqICAgaG91cnM6IDUsXG4gKiAgIG1pbnV0ZXM6IDksXG4gKiAgIHNlY29uZHM6IDMwLFxuICogfSlcbiAqIC8vPT4gVGh1IEp1biAxNSAyMDE3IDE1OjI5OjIwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZChkaXJ0eURhdGUsIGR1cmF0aW9uKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICBpZiAoIWR1cmF0aW9uIHx8IHR5cGVvZiBkdXJhdGlvbiAhPT0gJ29iamVjdCcpIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB2YXIgeWVhcnMgPSBkdXJhdGlvbi55ZWFycyA/IHRvSW50ZWdlcihkdXJhdGlvbi55ZWFycykgOiAwO1xuICB2YXIgbW9udGhzID0gZHVyYXRpb24ubW9udGhzID8gdG9JbnRlZ2VyKGR1cmF0aW9uLm1vbnRocykgOiAwO1xuICB2YXIgd2Vla3MgPSBkdXJhdGlvbi53ZWVrcyA/IHRvSW50ZWdlcihkdXJhdGlvbi53ZWVrcykgOiAwO1xuICB2YXIgZGF5cyA9IGR1cmF0aW9uLmRheXMgPyB0b0ludGVnZXIoZHVyYXRpb24uZGF5cykgOiAwO1xuICB2YXIgaG91cnMgPSBkdXJhdGlvbi5ob3VycyA/IHRvSW50ZWdlcihkdXJhdGlvbi5ob3VycykgOiAwO1xuICB2YXIgbWludXRlcyA9IGR1cmF0aW9uLm1pbnV0ZXMgPyB0b0ludGVnZXIoZHVyYXRpb24ubWludXRlcykgOiAwO1xuICB2YXIgc2Vjb25kcyA9IGR1cmF0aW9uLnNlY29uZHMgPyB0b0ludGVnZXIoZHVyYXRpb24uc2Vjb25kcykgOiAwOyAvLyBBZGQgeWVhcnMgYW5kIG1vbnRoc1xuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXRlV2l0aE1vbnRocyA9IG1vbnRocyB8fCB5ZWFycyA/IGFkZE1vbnRocyhkYXRlLCBtb250aHMgKyB5ZWFycyAqIDEyKSA6IGRhdGU7IC8vIEFkZCB3ZWVrcyBhbmQgZGF5c1xuXG4gIHZhciBkYXRlV2l0aERheXMgPSBkYXlzIHx8IHdlZWtzID8gYWRkRGF5cyhkYXRlV2l0aE1vbnRocywgZGF5cyArIHdlZWtzICogNykgOiBkYXRlV2l0aE1vbnRoczsgLy8gQWRkIGRheXMsIGhvdXJzLCBtaW51dGVzIGFuZCBzZWNvbmRzXG5cbiAgdmFyIG1pbnV0ZXNUb0FkZCA9IG1pbnV0ZXMgKyBob3VycyAqIDYwO1xuICB2YXIgc2Vjb25kc1RvQWRkID0gc2Vjb25kcyArIG1pbnV0ZXNUb0FkZCAqIDYwO1xuICB2YXIgbXNUb0FkZCA9IHNlY29uZHNUb0FkZCAqIDEwMDA7XG4gIHZhciBmaW5hbERhdGUgPSBuZXcgRGF0ZShkYXRlV2l0aERheXMuZ2V0VGltZSgpICsgbXNUb0FkZCk7XG4gIHJldHVybiBmaW5hbERhdGU7XG59IiwiaW1wb3J0IHsgVGFzayB9IGZyb20gXCIuL2NsYXNzZXNcIlxyXG5pbXBvcnQgeyBQcm9qZWN0c0RPTSwgVGFza3NET00sIFN0eWxlRE9NLCB3aG9sZUFwcCB9IGZyb20gXCIuL0RPTVwiO1xyXG5pbXBvcnQgeyBJbnB1dCwgR2V0SW5wdXQgfSBmcm9tIFwiLi9pbnB1dHNcIlxyXG5pbXBvcnQgeyBTdG9yYWdlIH0gZnJvbSBcIi4vc3RvcmFnZVwiXHJcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gXCIuL2ZpbHRlcnNcIlxyXG5cclxuY29uc3QgVUkgPSAoZnVuY3Rpb24oKXtcclxuXHJcbiAgICAvLyAtLSBHbG9iYWwgdmFyaWFibGVzIC0tIC8vXHJcblxyXG4gICAgbGV0IGFsbFRhc2tzQXJyYXkgPSBbe3Byb2plY3Q6XCJleGFtcGxlIHByb2plY3RcIiwgdGl0bGU6XCJFeGFtcGxlIFRhc2tcIiwgZGF0ZTogd2hvbGVBcHAuY3VycmVudERhdGUoKSwgbm90ZTogXCJUaGlzIGlzIGFuIGV4YW1wbGUgdGFzay5cIiwgY29tcGxldGVkOiBmYWxzZSwgaWQ6IDF9XVxyXG4gICAgbGV0IGFsbFByb2plY3RzQXJyYXkgPSBbIFwiZXhhbXBsZSBwcm9qZWN0XCIgXVxyXG4gICAgbGV0IGN1cnJlbnRseVNlbGVjdGVkUHJvamVjdCA9IFwiYWxsXCJcclxuXHJcbiAgICBjb25zdCByZW1vdmVUYXNrRnJvbUFycmF5ID0gKHRhc2tJRCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGluZGV4T2ZUYXNrID0gYWxsVGFza3NBcnJheS5tYXAodGFzayA9PiB0YXNrLmlkID09IHRhc2tJRCkuaW5kZXhPZih0cnVlKVxyXG4gICAgICAgIGFsbFRhc2tzQXJyYXkuc3BsaWNlKGluZGV4T2ZUYXNrLCAxKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNoYW5nZVJlYWRTdGF0dXMgPSAobm9kZSkgPT4ge1xyXG5cclxuICAgICAgICBUYXNrc0RPTS5jaGFuZ2VTdGF0dXMobm9kZSlcclxuXHJcbiAgICAgICAgY29uc3QgaW5kZXhPZlRhc2sgPSBhbGxUYXNrc0FycmF5Lm1hcCh0YXNrID0+IHRhc2suaWQgPT0gbm9kZS5pZCkuaW5kZXhPZih0cnVlKVxyXG5cclxuICAgICAgICBpZihhbGxUYXNrc0FycmF5W2luZGV4T2ZUYXNrXS5jb21wbGV0ZWQpe1xyXG4gICAgICAgICAgICBhbGxUYXNrc0FycmF5W2luZGV4T2ZUYXNrXS5jb21wbGV0ZWQgPSBmYWxzZVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFsbFRhc2tzQXJyYXlbaW5kZXhPZlRhc2tdLmNvbXBsZXRlZCA9IHRydWVcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNsZWFyQW5kUmVuZGVyID0gKGN1cnJlbnRUYXNrKSA9PiB7XHJcblxyXG4gICAgICAgIGlmKGN1cnJlbnRUYXNrID09PSBcInRoaXMgd2Vla1wiIHx8IGN1cnJlbnRUYXNrID09PSBcInRvZGF5XCIpe1xyXG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJlZExpc3QgPSBmaWx0ZXIuYnlQcmVzZXQoYWxsVGFza3NBcnJheSwgY3VycmVudGx5U2VsZWN0ZWRQcm9qZWN0KTtcclxuICAgICAgICAgICAgVGFza3NET00uY2xlYXJBbmRSZW5kZXJXaXRoSGVhZGVycyhmaWx0ZXJlZExpc3QpXHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFRhc2sgPT09IFwiYWxsXCIpIHtcclxuICAgICAgICAgICAgVGFza3NET00uY2xlYXJBbmRSZW5kZXJXaXRoSGVhZGVycyhhbGxUYXNrc0FycmF5KVxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJlZExpc3QgPSBmaWx0ZXIuYnlQcm9qZWN0KGFsbFRhc2tzQXJyYXksIGN1cnJlbnRseVNlbGVjdGVkUHJvamVjdCk7XHJcbiAgICAgICAgICAgIFRhc2tzRE9NLmNsZWFyQW5kUmVuZGVyVGFza3MoZmlsdGVyZWRMaXN0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZWRpdFRhc2sgPSAodGFza0lELCBpbnB1dCkgPT4ge1xyXG5cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBpbmRleE9mVGFzayA9IGFsbFRhc2tzQXJyYXkubWFwKHRhc2sgPT4gdGFzay5pZCA9PSB0YXNrSUQpLmluZGV4T2YodHJ1ZSlcclxuXHJcbiAgICAgICAgYWxsVGFza3NBcnJheVtpbmRleE9mVGFza10udGl0bGUgPSBpbnB1dFswXVxyXG4gICAgICAgIGFsbFRhc2tzQXJyYXlbaW5kZXhPZlRhc2tdLmRhdGUgPSBpbnB1dFsxXVxyXG4gICAgICAgIGFsbFRhc2tzQXJyYXlbaW5kZXhPZlRhc2tdLm5vdGUgPSBpbnB1dFsyXVxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gLS0gRXZlbnQgTGlzdGVuZXJzIC0tIC8vXHJcblxyXG4gICAgSW5wdXQubmV3UHJvamVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdElucHV0ID0gR2V0SW5wdXQucHJvamVjdE5hbWUoKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHByb2plY3RJbnB1dCA9PT0gXCJhbGxcIiB8fCBwcm9qZWN0SW5wdXQgPT09IFwidGhpcyB3ZWVrXCIgfHwgcHJvamVjdElucHV0ID09PSBcInRvZGF5XCIpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNhbid0IHVzZSBvbmUgb2YgdGhlIGZpbHRlciBuYW1lc1wiKVxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKGFsbFByb2plY3RzQXJyYXkuaW5kZXhPZihwcm9qZWN0SW5wdXQpICE9IC0xKXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDYW4ndCB1c2UgdGhlIHNhbWUgbmFtZVwiKVxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKHByb2plY3RJbnB1dCA9PT0gXCJcIil7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTmVlZHMgYW4gaW5wdXRcIilcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBQcm9qZWN0c0RPTS5yZW5kZXJTaW5nbGUocHJvamVjdElucHV0KVxyXG4gICAgICAgIGFsbFByb2plY3RzQXJyYXkucHVzaChwcm9qZWN0SW5wdXQpXHJcbiAgICAgICAgU3RvcmFnZS5zYXZlUHJvamVjdHMoYWxsUHJvamVjdHNBcnJheSlcclxuXHJcbiAgICB9KVxyXG5cclxuICAgIElucHV0LmNob29zZVByb2plY3QoKGUpID0+IHtcclxuICAgICAgICBjb25zdCBjbGlja2VkUHJvamVjdE5hbWUgPSBlLnRhcmdldC5wYXJlbnROb2RlLmlkXHJcbiAgICAgICAgY3VycmVudGx5U2VsZWN0ZWRQcm9qZWN0ID0gY2xpY2tlZFByb2plY3ROYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgd2hvbGVBcHAuY2hhbmdlVGl0bGUoY3VycmVudGx5U2VsZWN0ZWRQcm9qZWN0KVxyXG4gICAgICAgIFN0eWxlRE9NLmFkZEN1cnJlbnRseVNlbGVjdGVkKGUudGFyZ2V0KVxyXG5cclxuICAgICAgICBjbGVhckFuZFJlbmRlcihjdXJyZW50bHlTZWxlY3RlZFByb2plY3QpO1xyXG4gICAgfSlcclxuXHJcbiAgICBJbnB1dC5kZWxldGVQcm9qZWN0KCAoZSkgPT4ge1xyXG5cclxuICAgICAgICBjb25zdCBjb25maXJtZWRSZW1vdmUgPSBmdW5jdGlvbihub2RlLCBpZCwgdGFza3Mpe1xyXG4gICAgICAgICAgICBub2RlLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBhbGxQcm9qZWN0c0FycmF5LnNwbGljZShhbGxQcm9qZWN0c0FycmF5LmluZGV4T2YoaWQpLCAxKVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICB0YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlVGFza0Zyb21BcnJheSh0YXNrLmlkKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgXHJcbiAgICAgICAgICAgIGlmKHByb2plY3RJRCA9PT0gY3VycmVudGx5U2VsZWN0ZWRQcm9qZWN0KXtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRseVNlbGVjdGVkUHJvamVjdCA9IFwiYWxsXCJcclxuICAgICAgICAgICAgICAgIHdob2xlQXBwLmNoYW5nZVRpdGxlKGN1cnJlbnRseVNlbGVjdGVkUHJvamVjdCk7XHJcbiAgICAgICAgICAgICAgICBTdHlsZURPTS5yZXNldEN1cnJlbnRseVNlbGVjdGVkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICBjbGVhckFuZFJlbmRlcihjdXJyZW50bHlTZWxlY3RlZFByb2plY3QpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIFN0b3JhZ2Uuc2F2ZVByb2plY3RzKGFsbFByb2plY3RzQXJyYXkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjbGlja2VkTm9kZSA9IGUudGFyZ2V0LmNsb3Nlc3QoXCIubWFpbkNvbnRhaW5lcl9fcHJvamVjdExpc3REaXZfX3Byb2plY3RMaXN0X19wcm9qZWN0Q29udGFpbmVyXCIpXHJcbiAgICAgICAgY29uc3QgcHJvamVjdElEID0gY2xpY2tlZE5vZGUuaWRcclxuXHJcbiAgICAgICAgY29uc3QgdGFza3NBcnJheUlEcyA9IGFsbFRhc2tzQXJyYXkuZmlsdGVyKHRhc2sgPT4ge1xyXG4gICAgICAgICAgICBpZih0YXNrLnByb2plY3QgPT09IHByb2plY3RJRCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFzay5pZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgaWYodGFza3NBcnJheUlEcy5sZW5ndGggPT09IDApe1xyXG4gICAgICAgICAgICBjb25maXJtZWRSZW1vdmUoY2xpY2tlZE5vZGUsIHByb2plY3RJRCwgdGFza3NBcnJheUlEcyk7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgSW5wdXQuY29uZmlybURlbGV0ZShmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgaWYoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGVsZXRlTW9kYWxDb25maXJtXCIpKXtcclxuICAgICAgICAgICAgICAgIGNvbmZpcm1lZFJlbW92ZShjbGlja2VkTm9kZSwgcHJvamVjdElELCB0YXNrc0FycmF5SURzKTtcclxuICAgICAgICAgICAgICAgIFN0eWxlRE9NLnJlbW92ZURlbGV0ZUNvbmZpcm1Nb2RhbCgpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImRlbGV0ZU1vZGFsRGVueVwiKSl7XHJcbiAgICAgICAgICAgICAgICBTdHlsZURPTS5yZW1vdmVEZWxldGVDb25maXJtTW9kYWwoKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJjb25maXJtRGVsZXRlUHJvamVjdE1vZGFsXCIpKXtcclxuICAgICAgICAgICAgICAgIFN0eWxlRE9NLnJlbW92ZURlbGV0ZUNvbmZpcm1Nb2RhbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSlcclxuXHJcbiAgICBJbnB1dC5uZXdUYXNrKCgpID0+IHtcclxuXHJcbiAgICAgICAgY29uc3QgdGFza0lucHV0RGF0YSA9IEdldElucHV0LmZvcm0oKVxyXG5cclxuICAgICAgICBpZih0YXNrSW5wdXREYXRhID09PSBudWxsKXtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0YXNrID0gbmV3IFRhc2sodGFza0lucHV0RGF0YVswXSwgdGFza0lucHV0RGF0YVsxXSwgdGFza0lucHV0RGF0YVsyXSwgY3VycmVudGx5U2VsZWN0ZWRQcm9qZWN0KVxyXG5cclxuXHJcbiAgICAgICAgaWYoY3VycmVudGx5U2VsZWN0ZWRQcm9qZWN0ID09PSBcInRvZGF5XCIgfHwgY3VycmVudGx5U2VsZWN0ZWRQcm9qZWN0ID09PSBcInRoaXMgd2Vla1wiKXtcclxuICAgICAgICAgICAgdGFzay5wcm9qZWN0ID0gXCJhbGxcIlxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBhbGxUYXNrc0FycmF5LnB1c2godGFzaylcclxuICAgICAgICBjbGVhckFuZFJlbmRlcihjdXJyZW50bHlTZWxlY3RlZFByb2plY3QpXHJcbiAgICAgICAgU3RvcmFnZS5zYXZlVGFza3MoYWxsVGFza3NBcnJheSlcclxuXHJcbiAgICB9KVxyXG5cclxuICAgIElucHV0LnRhc2tFZGl0RGVsZXRlKChlKSA9PiB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGNsaWNrZWROb2RlID0gZS50YXJnZXQuY2xvc2VzdChcIi50YXNrQ29udGFpbmVyXCIpIFxyXG5cclxuICAgICAgICBpZihjbGlja2VkTm9kZSA9PT0gbnVsbCl7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZWRpdFRhc2tcIikpe1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInRhc2tEZWxldGVCdXR0b25cIikpe1xyXG4gICAgICAgICAgICByZW1vdmVUYXNrRnJvbUFycmF5KGNsaWNrZWROb2RlLmlkKTtcclxuICAgICAgICAgICAgY2xlYXJBbmRSZW5kZXIoY3VycmVudGx5U2VsZWN0ZWRQcm9qZWN0KTtcclxuICAgICAgICAgICAgU3RvcmFnZS5zYXZlVGFza3MoYWxsVGFza3NBcnJheSk7XHJcbiAgICAgICAgfSBlbHNlIGlmKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInRhc2tFZGl0QnV0dG9uXCIpKSB7XHJcbiAgICAgICAgICAgIFRhc2tzRE9NLnRhc2tFZGl0KGNsaWNrZWROb2RlKVxyXG5cclxuICAgICAgICB9IGVsc2UgaWYoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGFza0VkaXRDb25maXJtQnV0dG9uXCIpKXtcclxuICAgICAgICAgICAgY29uc3QgaW5wdXRzID0gR2V0SW5wdXQudGFza0VkaXQoY2xpY2tlZE5vZGUpXHJcblxyXG4gICAgICAgICAgICBpZihpbnB1dHMgPT09IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJpbnB1dCBlcnJvclwiKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFRhc2tzRE9NLnRhc2tFZGl0VmFsdWVzKGNsaWNrZWROb2RlLCBpbnB1dHMpXHJcbiAgICAgICAgICAgIFRhc2tzRE9NLnRhc2tFZGl0Q29uZmlybShjbGlja2VkTm9kZSlcclxuICAgICAgICAgICAgZWRpdFRhc2soY2xpY2tlZE5vZGUuaWQsIGlucHV0cylcclxuICAgICAgICAgICAgU3RvcmFnZS5zYXZlVGFza3MoYWxsVGFza3NBcnJheSlcclxuICAgICAgICAgICAgY2xlYXJBbmRSZW5kZXIoY3VycmVudGx5U2VsZWN0ZWRQcm9qZWN0KTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2hhbmdlUmVhZFN0YXR1cyhjbGlja2VkTm9kZSlcclxuICAgICAgICAgICAgU3RvcmFnZS5zYXZlVGFza3MoYWxsVGFza3NBcnJheSlcclxuICAgICAgICB9XHJcblxyXG4gICAgfSlcclxuXHJcbiAgICAvLyAtLSBPbiBMb2FkIC0tIC8vXHJcblxyXG4gICAgaWYoU3RvcmFnZS5sb2FkUHJvamVjdHMoKSAhPSBudWxsKXtcclxuICAgICAgICBhbGxQcm9qZWN0c0FycmF5ID0gU3RvcmFnZS5sb2FkUHJvamVjdHMoKVxyXG4gICAgfVxyXG5cclxuICAgIGlmKFN0b3JhZ2UubG9hZFRhc2tzKCkgIT0gbnVsbCl7XHJcbiAgICAgICAgYWxsVGFza3NBcnJheSA9IFN0b3JhZ2UubG9hZFRhc2tzKClcclxuICAgIH1cclxuICAgIFxyXG4gICAgd2hvbGVBcHAuc2V0RGF0ZUlucHV0UGFyYW1ldGVycygpO1xyXG4gICAgY2xlYXJBbmRSZW5kZXIoY3VycmVudGx5U2VsZWN0ZWRQcm9qZWN0KVxyXG4gICAgUHJvamVjdHNET00ucmVuZGVyQWxsKGFsbFByb2plY3RzQXJyYXkpXHJcblxyXG5cclxufSkoKTtcclxuXHJcbmV4cG9ydCB7IFVJIH0iXSwic291cmNlUm9vdCI6IiJ9